// Code generated by an internal Lingo tool, genpaths.go - DO NOT EDIT

package expr

import (
	"time"

	"github.com/weworksandbox/lingo"
	"github.com/weworksandbox/lingo/sql"
)

type UnsupportedType lingo.ExpressionFunc

func (UnsupportedType) ToSQL(_ lingo.Dialect) (sql.Data, error) {
	// TODO - Revisit how we want to deal with unsupported columns. Right now we just ignore them.
	//        Possibly just using the dialect to determine what to do? Dialect options?
	return sql.Empty(), nil
}

func BinaryPtrParam(i *[]byte) Binary {
	return InterfaceParam(i).ToSQL
}

func BinaryParam(i []byte) Binary {
	return InterfaceParam(i).ToSQL
}

type Binary lingo.ExpressionFunc

func (t Binary) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Binary) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Binary) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Binary) Eq(value Binary) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Binary) NotEq(value Binary) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Binary) LessThan(value Binary) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Binary) LessThanOrEqual(value Binary) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Binary) GreaterThan(value Binary) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Binary) GreaterThanOrEqual(value Binary) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Binary) Between(first, second Binary) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Binary) NotBetween(first, second Binary) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func BoolPtrParam(i *bool) Bool {
	return InterfaceParam(i).ToSQL
}

func BoolParam(i bool) Bool {
	return InterfaceParam(i).ToSQL
}

type Bool lingo.ExpressionFunc

func (t Bool) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Bool) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Bool) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Bool) Eq(value Bool) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Bool) NotEq(value Bool) ComboOperation {
	return NotEq(t, value).ToSQL
}

func Float32PtrParam(i *float32) Float32 {
	return InterfaceParam(i).ToSQL
}

func Float32Param(i float32) Float32 {
	return InterfaceParam(i).ToSQL
}

type Float32 lingo.ExpressionFunc

func (t Float32) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Float32) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Float32) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Float32) Eq(value Float32) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Float32) NotEq(value Float32) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Float32) LessThan(value Float32) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Float32) LessThanOrEqual(value Float32) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Float32) GreaterThan(value Float32) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Float32) GreaterThanOrEqual(value Float32) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Float32) Between(first, second Float32) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Float32) NotBetween(first, second Float32) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func Float64PtrParam(i *float64) Float64 {
	return InterfaceParam(i).ToSQL
}

func Float64Param(i float64) Float64 {
	return InterfaceParam(i).ToSQL
}

type Float64 lingo.ExpressionFunc

func (t Float64) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Float64) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Float64) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Float64) Eq(value Float64) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Float64) NotEq(value Float64) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Float64) LessThan(value Float64) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Float64) LessThanOrEqual(value Float64) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Float64) GreaterThan(value Float64) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Float64) GreaterThanOrEqual(value Float64) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Float64) Between(first, second Float64) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Float64) NotBetween(first, second Float64) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func IntPtrParam(i *int) Int {
	return InterfaceParam(i).ToSQL
}

func IntParam(i int) Int {
	return InterfaceParam(i).ToSQL
}

type Int lingo.ExpressionFunc

func (t Int) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Int) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Int) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Int) Eq(value Int) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Int) NotEq(value Int) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Int) LessThan(value Int) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Int) LessThanOrEqual(value Int) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Int) GreaterThan(value Int) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Int) GreaterThanOrEqual(value Int) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Int) Between(first, second Int) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Int) NotBetween(first, second Int) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func Int8PtrParam(i *int8) Int8 {
	return InterfaceParam(i).ToSQL
}

func Int8Param(i int8) Int8 {
	return InterfaceParam(i).ToSQL
}

type Int8 lingo.ExpressionFunc

func (t Int8) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Int8) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Int8) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Int8) Eq(value Int8) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Int8) NotEq(value Int8) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Int8) LessThan(value Int8) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Int8) LessThanOrEqual(value Int8) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Int8) GreaterThan(value Int8) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Int8) GreaterThanOrEqual(value Int8) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Int8) Between(first, second Int8) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Int8) NotBetween(first, second Int8) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func Int16PtrParam(i *int16) Int16 {
	return InterfaceParam(i).ToSQL
}

func Int16Param(i int16) Int16 {
	return InterfaceParam(i).ToSQL
}

type Int16 lingo.ExpressionFunc

func (t Int16) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Int16) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Int16) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Int16) Eq(value Int16) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Int16) NotEq(value Int16) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Int16) LessThan(value Int16) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Int16) LessThanOrEqual(value Int16) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Int16) GreaterThan(value Int16) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Int16) GreaterThanOrEqual(value Int16) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Int16) Between(first, second Int16) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Int16) NotBetween(first, second Int16) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func Int32PtrParam(i *int32) Int32 {
	return InterfaceParam(i).ToSQL
}

func Int32Param(i int32) Int32 {
	return InterfaceParam(i).ToSQL
}

type Int32Column struct {
	Int32
	Table  lingo.Table
	Column lingo.Expression
}

func (t Int32Column) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t.Column.ToSQL(d) //Lit("inventory_id").ToSQL(d)
}

type Int32 struct {
	exp lingo.Expression
}

type Int32 lingo.ExpressionFunc

func (t Int32) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Int32) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Int32) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Int32) Eq(value Int32) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Int32) NotEq(value Int32) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Int32) LessThan(value Int32) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Int32) LessThanOrEqual(value Int32) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Int32) GreaterThan(value Int32) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Int32) GreaterThanOrEqual(value Int32) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Int32) Between(first, second Int32) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Int32) NotBetween(first, second Int32) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func Int64PtrParam(i *int64) Int64 {
	return InterfaceParam(i).ToSQL
}

func Int64Param(i int64) Int64 {
	return InterfaceParam(i).ToSQL
}

type Int64 lingo.ExpressionFunc

func (t Int64) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Int64) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Int64) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Int64) Eq(value Int64) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Int64) NotEq(value Int64) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Int64) LessThan(value Int64) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Int64) LessThanOrEqual(value Int64) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Int64) GreaterThan(value Int64) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Int64) GreaterThanOrEqual(value Int64) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Int64) Between(first, second Int64) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Int64) NotBetween(first, second Int64) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func StringPtrParam(i *string) String {
	return InterfaceParam(i).ToSQL
}

func StringParam(i string) String {
	return InterfaceParam(i).ToSQL
}

type String lingo.ExpressionFunc

func (t String) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t String) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t String) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t String) Eq(value String) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t String) NotEq(value String) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t String) LessThan(value String) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t String) LessThanOrEqual(value String) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t String) GreaterThan(value String) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t String) GreaterThanOrEqual(value String) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t String) Between(first, second String) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t String) NotBetween(first, second String) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}

func (t String) StringConcat(value String) ComboOperation {
	return StringConcat(t, value).ToSQL
}

func TimePtrParam(i *time.Time) Time {
	return InterfaceParam(i).ToSQL
}

func TimeParam(i time.Time) Time {
	return InterfaceParam(i).ToSQL
}

type Time lingo.ExpressionFunc

func (t Time) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return t(d)
}

func (t Time) IsNull() ComboOperation {
	return IsNull(t).ToSQL
}

func (t Time) IsNotNull() ComboOperation {
	return IsNotNull(t).ToSQL
}

func (t Time) Eq(value Time) ComboOperation {
	return Eq(t, value).ToSQL
}

func (t Time) NotEq(value Time) ComboOperation {
	return NotEq(t, value).ToSQL
}

func (t Time) LessThan(value Time) ComboOperation {
	return LessThan(t, value).ToSQL
}

func (t Time) LessThanOrEqual(value Time) ComboOperation {
	return LessThanOrEqual(t, value).ToSQL
}

func (t Time) GreaterThan(value Time) ComboOperation {
	return GreaterThan(t, value).ToSQL
}

func (t Time) GreaterThanOrEqual(value Time) ComboOperation {
	return GreaterThanOrEqual(t, value).ToSQL
}

func (t Time) Between(first, second Time) ComboOperation {
	return Between(t, first, second).ToSQL
}

func (t Time) NotBetween(first, second Time) ComboOperation {
	return NotBetween(t, first, second).ToSQL
}
