// Code generated by an internal Lingo tool, genpaths.go - DO NOT EDIT

package path

import (
	"github.com/weworksandbox/lingo"
	"github.com/weworksandbox/lingo/expr"
	"github.com/weworksandbox/lingo/expr/operator"
	"github.com/weworksandbox/lingo/expr/set"
	"github.com/weworksandbox/lingo/sql"
)

func NewFloat64WithAlias(e lingo.Table, name, alias string) Float64 {
	return Float64{
		entity: e,
		name:   name,
		alias:  alias,
	}
}

func NewFloat64(e lingo.Table, name string) Float64 {
	return NewFloat64WithAlias(e, name, "")
}

type Float64 struct {
	entity lingo.Table
	name   string
	alias  string
}

func (p Float64) GetParent() lingo.Table {
	return p.entity
}

func (p Float64) GetName() string {
	return p.name
}

func (p Float64) GetAlias() string {
	return p.alias
}

func (p Float64) As(alias string) Float64 {
	p.alias = alias
	return p
}

func (p Float64) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return ExpandColumnWithDialect(d, p)
}

func (p Float64) To(value float64) set.Set {
	return set.To(p, expr.NewValue(value))
}

func (p Float64) ToExpr(exp lingo.Expression) set.Set {
	return set.To(p, exp)
}

func (p Float64) Eq(value float64) operator.Binary {
	return operator.Eq(p, expr.NewValue(value))
}

func (p Float64) EqPath(exp lingo.Expression) operator.Binary {
	return operator.Eq(p, exp)
}

func (p Float64) NotEq(value float64) operator.Binary {
	return operator.NotEq(p, expr.NewValue(value))
}

func (p Float64) NotEqPath(exp lingo.Expression) operator.Binary {
	return operator.NotEq(p, exp)
}

func (p Float64) LT(value float64) operator.Binary {
	return operator.LessThan(p, expr.NewValue(value))
}

func (p Float64) LTPath(exp lingo.Expression) operator.Binary {
	return operator.LessThan(p, exp)
}

func (p Float64) LTOrEq(value float64) operator.Binary {
	return operator.LessThanOrEqual(p, expr.NewValue(value))
}

func (p Float64) LTOrEqPath(exp lingo.Expression) operator.Binary {
	return operator.LessThanOrEqual(p, exp)
}

func (p Float64) GT(value float64) operator.Binary {
	return operator.GreaterThan(p, expr.NewValue(value))
}

func (p Float64) GTPath(exp lingo.Expression) operator.Binary {
	return operator.GreaterThan(p, exp)
}

func (p Float64) GTOrEq(value float64) operator.Binary {
	return operator.GreaterThanOrEqual(p, expr.NewValue(value))
}

func (p Float64) GTOrEqPath(exp lingo.Expression) operator.Binary {
	return operator.GreaterThanOrEqual(p, exp)
}

func (p Float64) IsNull() operator.Unary {
	return operator.IsNull(p)
}

func (p Float64) IsNotNull() operator.Unary {
	return operator.IsNotNull(p)
}

func (p Float64) In(values ...float64) operator.Binary {
	return operator.In(p, expr.NewParens(expr.NewValue(values)))
}

func (p Float64) InPaths(exps ...lingo.Expression) operator.Binary {
	return operator.In(p, expr.NewParens(expr.ToList(exps)))
}

func (p Float64) NotIn(values ...float64) operator.Binary {
	return operator.NotIn(p, expr.NewParens(expr.NewValue(values)))
}

func (p Float64) NotInPaths(exps ...lingo.Expression) operator.Binary {
	return operator.NotIn(p, expr.NewParens(expr.ToList(exps)))
}

func (p Float64) Between(first, second float64) operator.Binary {
	return operator.Between(p, expr.NewValue(first), expr.NewValue(second))
}

func (p Float64) BetweenPaths(first, second lingo.Expression) operator.Binary {
	return operator.Between(p, first, second)
}

func (p Float64) NotBetween(first, second float64) operator.Binary {
	return operator.NotBetween(p, expr.NewValue(first), expr.NewValue(second))
}

func (p Float64) NotBetweenPaths(first, second lingo.Expression) operator.Binary {
	return operator.NotBetween(p, first, second)
}
