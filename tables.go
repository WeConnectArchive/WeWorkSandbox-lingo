// Code generated by go2go; DO NOT EDIT.


//line tables.go2:1
package lingo

//line tables.go2:1
import (
//line tables.go2:1
 "encoding/json"
//line tables.go2:1
 "fmt"
//line tables.go2:1
 "reflect"
//line tables.go2:1
 "strconv"
//line tables.go2:1
 "strings"
//line tables.go2:1
 "sync/atomic"
//line tables.go2:1
 "testing"
//line tables.go2:1
)

//line tables.go2:5
type Actor struct {
	ActorID int16
}

func NewTActor() TActor {
	return NewTActorForVariable("actor")
}
func NewTActorForVariable(variable string) TActor {
	pm := NewPathMetadataForVariable(variable)
	printDebug("NewPathMetadataForVariable(variable)", pm)
	tablePath := instantiate୦୦NewSimplePath୦lingo୮aActor(Actor{}, pm)
	printDebug("tablePath", tablePath)
	return NewTActorForPath(tablePath)
}
func NewTActorForPath(p instantiate୦୦SimplePath୦lingo୮aActor,) TActor {
	var t TActor
	t.path = p
	t.ActorID = instantiate୦୦NewNumberPath୦int16(instantiate୦୦NewSimplePath୦int16(0, NewPathMetadataForProperty("actor_id", p.Metadata())))
	t.IsActive = NewBoolPath(instantiate୦୦NewSimplePath୦bool(false, NewPathMetadataForProperty("is_active", p.Metadata())))
	printDebug("t", t)
	return t
}

type TActor struct {
	path     instantiate୦୦SimplePath୦lingo୮aActor
	ActorID  instantiate୦୦NumberPath୦int16
	IsActive BoolPath
}

//line tables.go2:33
func (t TActor) Type() reflect.Type {
	return t.path.Type()
}
func (t TActor) Metadata() PathMetadata {
	return t.path.Metadata()
}

//line paths.go2:73
func instantiate୦୦NewSimplePath୦lingo୮aActor(value Actor,

//line paths.go2:73
 pm PathMetadata) instantiate୦୦SimplePath୦lingo୮aActor {
	return instantiate୦୦SimplePath୦lingo୮aActor{
		value: value,
		pm:    pm,
	}
}

//line paths.go2:78
type instantiate୦୦SimplePath୦lingo୮aActor struct {
//line paths.go2:80
 value Actor

//line paths.go2:81
 pm PathMetadata
}

//line paths.go2:83
func (p instantiate୦୦SimplePath୦lingo୮aActor,) Type() reflect.Type {
//line paths.go2:83
 return reflect.TypeOf(p.value)
//line paths.go2:83
}
func (p instantiate୦୦SimplePath୦lingo୮aActor,) Metadata() PathMetadata { return p.pm }
//line paths.go2:73
func instantiate୦୦NewSimplePath୦int16(value int16,

//line paths.go2:73
 pm PathMetadata) instantiate୦୦SimplePath୦int16 {
	return instantiate୦୦SimplePath୦int16{
		value: value,
		pm:    pm,
	}
}

//line paths.go2:102
func instantiate୦୦NewNumberPath୦int16(p instantiate୦୦SimplePath୦int16,) instantiate୦୦NumberPath୦int16 {
	return instantiate୦୦NumberPath୦int16(p)
}
//line paths.go2:73
func instantiate୦୦NewSimplePath୦bool(value bool,

//line paths.go2:73
 pm PathMetadata) instantiate୦୦SimplePath୦bool {
	return instantiate୦୦SimplePath୦bool{
		value: value,
		pm:    pm,
	}
}

//line paths.go2:78
type instantiate୦୦NumberPath୦int16 instantiate୦୦SimplePath୦int16

//line paths.go2:106
func (p instantiate୦୦NumberPath୦int16,) Type() reflect.Type { return reflect.TypeOf(p) }
func (p instantiate୦୦NumberPath୦int16,) EqValue(v int16,

//line paths.go2:107
) BooleanExpression {
	return BooleanExpression(nil)
}
func (p instantiate୦୦NumberPath୦int16,) Eq(v instantiate୦୦TypedExpression୦int16,) BooleanExpression {
	return NewOpEqual(p, v)
}
func (p instantiate୦୦NumberPath୦int16,) GTValue(v int16,

//line paths.go2:113
) BooleanExpression {
	return p.GT(nil)
}
func (p instantiate୦୦NumberPath୦int16,) GT(e instantiate୦୦TypedExpression୦int16,) BooleanExpression {
	return NewOpGreaterThan(p, e)
}

//line paths.go2:118
type instantiate୦୦SimplePath୦int16 struct {
//line paths.go2:80
 value int16

//line paths.go2:81
 pm PathMetadata
}

//line paths.go2:83
func (p instantiate୦୦SimplePath୦int16,) Type() reflect.Type { return reflect.TypeOf(p.value) }
func (p instantiate୦୦SimplePath୦int16,) Metadata() PathMetadata                 { return p.pm }

//line paths.go2:84
type instantiate୦୦TypedExpression୦int16 interface {
//line expression.go2:14
 Expression
}

//line expression.go2:15
var _ = json.Compact
//line expression.go2:15
var _ = fmt.Errorf
//line expression.go2:15
var _ = reflect.Append
//line expression.go2:15
var _ = strconv.AppendBool

//line expression.go2:15
type _ strings.Builder

//line expression.go2:15
var _ = atomic.AddInt32
//line expression.go2:15
var _ = testing.AllocsPerRun
