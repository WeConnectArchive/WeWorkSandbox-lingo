// Code generated by go2go; DO NOT EDIT.


//line expression.go2:1
package lingo

//line expression.go2:1
import (
//line expression.go2:1
 "fmt"
//line expression.go2:1
 "reflect"
//line expression.go2:1
 "regexp"
//line expression.go2:1
 "strconv"
//line expression.go2:1
 "strings"
//line expression.go2:1
 "sync/atomic"
//line expression.go2:1
 "testing"
//line expression.go2:1
)

//line expression.go2:16
type QueryMetadata struct{}

//line expression.go2:19
func VisitWithDefaultParamsBuilder(e Expression) QueryMetadata {
				qm := QueryMetadata{}
//line expression.go2:20
 instantiate୦୦VisitWithBuilder୦୮1lingo୮aQueryMetadata୦struct୮4୮5(ParamsBuilder{}, &qm, e)
//line expression.go2:22
 return qm
}

//line expression.go2:24
type ParamsBuilder struct{}

//line expression.go2:25
func (b ParamsBuilder) Visit(qm *QueryMetadata, e Expression) struct{} {
	if o, ok := e.(Operation); ok {
		for _, arg := range o.Args() {
			b.Visit(qm, arg)
		}
		b.Visit(qm, e)
	}

	return struct{}{}
}

//line expression.go2:37
func VisitWithDefaultPathBuilder(e Expression) Path {
	return instantiate୦୦VisitWithBuilder୦struct୮4୮5୦lingo୮aPath(PathBuilder{}, struct{}{}, e)
}

//line expression.go2:40
type PathBuilder struct{}

//line expression.go2:41
func (b PathBuilder) Visit(ctx struct{}, e Expression) Path {
	if p, ok := e.(Path); ok {
		return p
	}
	if o, ok := e.(Operation); ok {
		for _, arg := range o.Args() {
			if p := b.Visit(ctx, arg); p != nil {
				return p
			}
		}
	}
	return nil
}

//line expression.go2:57
func VisitWithDefaultPathsBuilder(e Expression) []Path {
	return instantiate୦୦VisitWithBuilder୦୮6୮7lingo୮aPath୦୮6୮7lingo୮aPath(PathsBuilder{}, make([]Path, 0, 10), e)
}

//line expression.go2:60
type PathsBuilder struct{}

//line expression.go2:61
func (b PathsBuilder) Visit(paths []Path, e Expression) []Path {
	if p, ok := e.(Path); ok {
		paths = append(paths, p)
	}
	if o, ok := e.(Operation); ok {
		for _, arg := range o.Args() {
			paths = b.Visit(paths, arg)
		}
	}
	return paths
}

//line expression.go2:74
func VisitWithDefaultToStringBuilder(e Expression) string {
	return instantiate୦୦VisitWithBuilder୦lingo୮aTemplates୦string(ToStringBuilder{}, DefaultTemplates(), e)
}

//line expression.go2:77
type ToStringBuilder struct{}

//line expression.go2:78
func (b ToStringBuilder) Visit(t Templates, e Expression) string {
	if c, ok := e.(ConstantExpression); ok {
		return fmt.Sprintf("%v", c.Interface())
	}
	if o, ok := e.(Operation); ok {
		op := o.Operator()

		syntax, ok := t[op]
		if !ok {
			return fmt.Sprintf("unknown operation for operator %s and args %v", op, o.Args())
		}

		value := syntax.Replace(func(idx int) string {
			arg := o.Arg(idx)
			if arg == nil {
				return fmt.Sprintf("unknown argument at index '%d' for syntax '%s'", idx, syntax)
			}
			if argOp, ok := arg.(Operation); ok {
				return "(" + b.Visit(t, argOp) + ")"
			} else {
				return b.Visit(t, arg)
			}
		})
		return value
	}
	if p, ok := e.(Path); ok {
		parent := p.Metadata().Parent()
		elem := p.Metadata().Elem()

		if parent == nil {
			return fmt.Sprintf("%v", elem)
		}

		syntax, ok := t[p.Metadata().PathType()]
		if !ok {
			return fmt.Sprintf("unknown operation for path type %v", p.Metadata().PathType())
		}

		values := []interface{}{parent, elem}
		value := syntax.Replace(func(idx int) string {
			if idx > 2 {
				return ""
			}
			if exp, ok := values[idx].(Expression); ok {
				return b.Visit(t, exp)
			}
			return fmt.Sprintf("%v", values[idx])
		})
		return value
	}
	return b.Visit(t, e)
}

//line expression.go2:136
type Expression interface {
	Type() reflect.Type
	String() string
}

type ConstantExpression interface {
	Expression
	Interface() interface{}
}

type ParamExpression interface {
	Expression
	Name() string
	Anonymus() bool
}

//line expression.go2:159
type PredicateExpression interface {
//line expression.go2:159
 instantiate୦୦TypedExpression୦bool

				Not() PredicateExpression
}

type BooleanExpression interface {
//line expression.go2:164
 instantiate୦୦TypedExpression୦bool

				AsPath(p instantiate୦୦TypedPath୦bool,) BooleanExpression
				As(alias string) BooleanExpression

				And(e PredicateExpression) BooleanExpression
				Not() BooleanExpression
				Or(e PredicateExpression) BooleanExpression

				IsTrue() BooleanExpression
				IsFalse() BooleanExpression

				EqValue(b bool) BooleanExpression
				Eq(e instantiate୦୦TypedExpression୦bool,) BooleanExpression
}

//line expression.go2:185
type Ordering int

//line expression.go2:186
const (
	OrderUnknown Ordering = iota
	OrderAsc
	OrderDesc
)

//line expression.go2:219
type StringExpression interface {
//line expression.go2:219
 instantiate୦୦LiteralExpression୦string

				As(alias instantiate୦୦TypedPath୦string,) StringExpression
				Alias(alias string) StringExpression
				AppendValue(v string) StringExpression
				Append(v instantiate୦୦TypedExpression୦string,) StringExpression
				CharAtValue(idx int) instantiate୦୦TypedExpression୦rune
				CharAt(idx instantiate୦୦TypedExpression୦int,) instantiate୦୦TypedExpression୦rune
				ConcatValue(v string) StringExpression
				Concat(v instantiate୦୦TypedExpression୦string,) StringExpression
				ContainsValue(v string) BooleanExpression
				Contains(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				ContainsFoldValue(v string) BooleanExpression
				ContainsFold(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				EqualsFoldValue(v string) BooleanExpression
				EqualsFold(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				HasPrefixValue(v string) BooleanExpression
				HasPrefix(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				HasPrefixFoldValue(v string) BooleanExpression
				HasPrefixFold(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				HasSuffixValue(v string) BooleanExpression
				HasSuffix(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				HasSuffixFoldValue(v string) BooleanExpression
				HasSuffixFold(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				IndexOfValue(v string) instantiate୦୦NumberExpression୦int
				IndexOf(v instantiate୦୦TypedExpression୦string,) instantiate୦୦NumberExpression୦int
				IndexOfNValue(v string, n int) instantiate୦୦NumberExpression୦int
				IndexOfN(v instantiate୦୦TypedExpression୦string, n int) instantiate୦୦NumberExpression୦int
				IsEmpty() BooleanExpression
				IsNotEmpty() BooleanExpression
				Len() instantiate୦୦NumberExpression୦int
				LikeValue(v string) BooleanExpression
				Like(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				LikeFoldValue(v string) BooleanExpression
				LikeFold(v instantiate୦୦TypedExpression୦string,) BooleanExpression
				LikeEscapeValue(v string, escape rune) BooleanExpression
				LikeEscape(v instantiate୦୦TypedExpression୦string, escape rune) BooleanExpression
				LikeFoldEscapeValue(v string, escape rune) BooleanExpression
				LikeFoldEscape(v instantiate୦୦TypedExpression୦string, escape rune) BooleanExpression
				LocateValue(v string) instantiate୦୦NumberExpression୦int
				Locate(v instantiate୦୦TypedExpression୦string,) instantiate୦୦NumberExpression୦int
				LocateFromValue(v string, start int) instantiate୦୦NumberExpression୦int
				LocateFrom(v instantiate୦୦TypedExpression୦string, start instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int
				Lower() StringExpression
				MatchesValue(regex regexp.Regexp) BooleanExpression
				Matches(regex instantiate୦୦TypedExpression୦string,) BooleanExpression

//line expression.go2:267
 NotEqFoldValue(v string) BooleanExpression
	NotEqFold(v instantiate୦୦TypedExpression୦string,) BooleanExpression
	NotLikeValue(v string) BooleanExpression
	NotLike(v instantiate୦୦TypedExpression୦string,) BooleanExpression
	NotLikeFoldValue(v string) BooleanExpression
	NotLikeFold(v instantiate୦୦TypedExpression୦string,) BooleanExpression
	NotLikeEscapeValue(v string, escape rune) BooleanExpression
	NotLikeEscape(v instantiate୦୦TypedExpression୦string, escape rune) BooleanExpression
	NotLikeFoldEscapeValue(v string, escape rune) BooleanExpression
	NotLikeFoldEscape(v instantiate୦୦TypedExpression୦string, escape rune) BooleanExpression
	PrependValue(v string) StringExpression
	Prepend(v instantiate୦୦TypedExpression୦string,) StringExpression
	StringValue() StringExpression
	SubstringStartValue(begin int) StringExpression
	SubstringStart(begin instantiate୦୦TypedExpression୦int,) StringExpression
	SubstringStartValueEnd(begin int, end instantiate୦୦TypedExpression୦int,) StringExpression
	SubstringStartEndValue(begin instantiate୦୦TypedExpression୦int, end int) StringExpression
	SubstringStartAndEndValue(begin, end int) StringExpression
	SubstringStartEnd(begin, end instantiate୦୦TypedExpression୦int,) StringExpression
	Trim() StringExpression
	Upper() StringExpression
}

//line expression.go2:12
func instantiate୦୦VisitWithBuilder୦୮1lingo୮aQueryMetadata୦struct୮4୮5(b instantiate୦୦TypedBuilder୦୮1lingo୮aQueryMetadata୦struct୮4୮5, buildCtx *QueryMetadata, e Expression) struct{} {
	return b.Visit(buildCtx, e)
}
//line expression.go2:12
func instantiate୦୦VisitWithBuilder୦struct୮4୮5୦lingo୮aPath(b instantiate୦୦TypedBuilder୦struct୮4୮5୦lingo୮aPath, buildCtx struct{}, e Expression) Path {
	return b.Visit(buildCtx, e)
}
//line expression.go2:12
func instantiate୦୦VisitWithBuilder୦୮6୮7lingo୮aPath୦୮6୮7lingo୮aPath(b instantiate୦୦TypedBuilder୦୮6୮7lingo୮aPath୦୮6୮7lingo୮aPath, buildCtx []Path, e Expression) []Path {
	return b.Visit(buildCtx, e)
}
//line expression.go2:12
func instantiate୦୦VisitWithBuilder୦lingo୮aTemplates୦string(b instantiate୦୦TypedBuilder୦lingo୮aTemplates୦string, buildCtx Templates, e Expression) string {
	return b.Visit(buildCtx, e)
}

//line expression.go2:14
type instantiate୦୦TypedExpression୦bool interface {
//line expression.go2:156
 Expression
}
//line expression.go2:157
type instantiate୦୦TypedPath୦bool interface {
//line paths.go2:75
 instantiate୦୦TypedExpression୦bool

			Path
}
//line paths.go2:78
type instantiate୦୦LiteralExpression୦string interface {
//line expression.go2:214
 instantiate୦୦ComparableExpression୦string

	StringValue() StringExpression
}
//line expression.go2:217
type instantiate୦୦TypedPath୦string interface {
//line paths.go2:75
 instantiate୦୦TypedExpression୦string

			Path
}
//line paths.go2:78
type instantiate୦୦TypedExpression୦string interface {
//line expression.go2:156
 Expression
}
//line expression.go2:157
type instantiate୦୦TypedExpression୦rune interface {
//line expression.go2:156
 Expression
}
//line expression.go2:157
type instantiate୦୦TypedExpression୦int interface {
//line expression.go2:156
 Expression
}
//line expression.go2:157
type instantiate୦୦NumberExpression୦int interface {
//line expression.go2:290
 instantiate୦୦ComparableExpression୦int

	Abs() instantiate୦୦NumberExpression୦int
	AddValue(v int,

//line expression.go2:293
 ) instantiate୦୦NumberExpression୦int
				Add(t instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int
				AsPath(p instantiate୦୦TypedPath୦int,) instantiate୦୦NumberExpression୦int
				As(alias string) instantiate୦୦NumberExpression୦int

//line expression.go2:305
 Ceil() instantiate୦୦NumberExpression୦int
	DivideValue(v int,

//line expression.go2:306
 ) instantiate୦୦NumberExpression୦int
				Divide(e instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int
				EqValue(v int,

//line expression.go2:308
 ) BooleanExpression
				Eq(v instantiate୦୦TypedExpression୦int,) BooleanExpression
				Floor() instantiate୦୦NumberExpression୦int

//line expression.go2:313
 ModValue(v int,

//line expression.go2:313
 ) instantiate୦୦NumberExpression୦int
	Mod(v instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int
	MultiplyValue(v int,

//line expression.go2:315
 ) instantiate୦୦NumberExpression୦int
				Multiply(v instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int
				Negate() instantiate୦୦NumberExpression୦int
				Round() instantiate୦୦NumberExpression୦int
				Sqrt() instantiate୦୦NumberExpression୦int
				SubtractValue(v int,

//line expression.go2:320
 ) instantiate୦୦NumberExpression୦int
				Subtract(v instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int

				InValues(v ...int,

//line expression.go2:323
 ) instantiate୦୦NumberExpression୦int
				In(v ...instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int
				NotInValues(v ...int,

//line expression.go2:325
 ) instantiate୦୦NumberExpression୦int
				NotIn(v ...instantiate୦୦TypedExpression୦int,) instantiate୦୦NumberExpression୦int
}
//line expression.go2:327
type instantiate୦୦TypedBuilder୦୮1lingo୮aQueryMetadata୦struct୮4୮5 interface {
//line expression.go2:10
 Visit(ctx *QueryMetadata, e Expression) struct{}
}
//line expression.go2:11
type instantiate୦୦TypedBuilder୦struct୮4୮5୦lingo୮aPath interface {
//line expression.go2:10
 Visit(ctx struct{}, e Expression) Path
}
//line expression.go2:11
type instantiate୦୦TypedBuilder୦୮6୮7lingo୮aPath୦୮6୮7lingo୮aPath interface {
//line expression.go2:10
 Visit(ctx []Path, e Expression) []Path
}
//line expression.go2:11
type instantiate୦୦TypedBuilder୦lingo୮aTemplates୦string interface {
//line expression.go2:10
 Visit(ctx Templates, e Expression) string
}
//line expression.go2:11
type instantiate୦୦ComparableExpression୦string interface {
//line expression.go2:197
 instantiate୦୦AnyComparableExpression୦string

	Asc() instantiate୦୦Order୦string
	BetweenValues(l, r string) BooleanExpression
	Between(l, r instantiate୦୦TypedExpression୦string,) BooleanExpression
	NotBetweenValues(l, r string) BooleanExpression
	NotBetween(l, r instantiate୦୦TypedExpression୦string,) BooleanExpression
	GTValue(v string) BooleanExpression
	GT(e instantiate୦୦TypedExpression୦string,) BooleanExpression
	GTOrEqValue(v string) BooleanExpression
	GTOrEq(v instantiate୦୦TypedExpression୦string,) BooleanExpression
	LTValue(v string) BooleanExpression
	LT(e instantiate୦୦TypedExpression୦string,) BooleanExpression
	LTOrEqValue(v string) BooleanExpression
	LTOrEq(v instantiate୦୦TypedExpression୦string,) BooleanExpression
}
//line expression.go2:212
type instantiate୦୦ComparableExpression୦int interface {
//line expression.go2:197
 instantiate୦୦AnyComparableExpression୦int

				Asc() instantiate୦୦Order୦int
				BetweenValues(l, r int) BooleanExpression
				Between(l, r instantiate୦୦TypedExpression୦int,) BooleanExpression
				NotBetweenValues(l, r int) BooleanExpression
				NotBetween(l, r instantiate୦୦TypedExpression୦int,) BooleanExpression
				GTValue(v int) BooleanExpression
				GT(e instantiate୦୦TypedExpression୦int,) BooleanExpression
				GTOrEqValue(v int) BooleanExpression
				GTOrEq(v instantiate୦୦TypedExpression୦int,) BooleanExpression
				LTValue(v int) BooleanExpression
				LT(e instantiate୦୦TypedExpression୦int,) BooleanExpression
				LTOrEqValue(v int) BooleanExpression
				LTOrEq(v instantiate୦୦TypedExpression୦int,) BooleanExpression
}
//line expression.go2:212
type instantiate୦୦TypedPath୦int interface {
//line paths.go2:75
 instantiate୦୦TypedExpression୦int

			Path
}
//line paths.go2:78
type instantiate୦୦AnyComparableExpression୦string interface {
//line expression.go2:180
 instantiate୦୦TypedExpression୦string

	Desc()
}
//line expression.go2:183
type instantiate୦୦Order୦string interface {
//line expression.go2:192
 Order() Ordering
	Ascending() bool
	Path() instantiate୦୦TypedExpression୦string
}
//line expression.go2:195
type instantiate୦୦AnyComparableExpression୦int interface {
//line expression.go2:180
 instantiate୦୦TypedExpression୦int

				Desc()
}
//line expression.go2:183
type instantiate୦୦Order୦int interface {
//line expression.go2:192
 Order() Ordering
	Ascending() bool
	Path() instantiate୦୦TypedExpression୦int
}
//line expression.go2:195
type Importable୦ int

//line expression.go2:195
var _ = fmt.Errorf
//line expression.go2:195
var _ = reflect.Append
//line expression.go2:195
var _ = regexp.Compile
//line expression.go2:195
var _ = strconv.AppendBool

//line expression.go2:195
type _ strings.Builder

//line expression.go2:195
var _ = atomic.AddInt32
//line expression.go2:195
var _ = testing.AllocsPerRun
