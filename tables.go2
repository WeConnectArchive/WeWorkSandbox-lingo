package lingo

import "reflect"

type Actor struct {
	ActorID int16
	IsActive bool
}

func NewTActor() TActor {
	return NewTActorForVariable("actor")
}
func NewTActorForVariable(variable string) TActor {
	pm := NewPathMetadataForVariable(variable)
	tablePath := NewSimplePath[Actor](Actor{}, pm)
	return NewTActorForPath(tablePath)
}
func NewTActorForPath(p SimplePath[Actor]) TActor {
	var t TActor = TActor{
		mixin: p,
	}
	t.ActorID = NewNumberPath[int16](NewSimplePathForProperty[int16](0, "actor_id", p))
	t.IsActive = NewBoolPath(NewSimplePathForProperty[bool](false, "is_active", p))
	t.FirstName = NewStringPath(NewSimplePathForProperty[string]("", "first_name", p))
	return t
}

type TActor struct {
	mixin SimplePath[Actor]

	ActorID NumberPath[int16]
	IsActive BoolPath
	FirstName StringPath
}
func (t TActor) Type() reflect.Type {
	return t.mixin.Type()
}
func (t TActor) Metadata() PathMetadata {
	return t.mixin.Metadata()
}
func (t TActor) Root() Path {
	return t.mixin.Root()
}
func (t TActor) String() string {
	return VisitWithBuilder[Templates, string](ToStringBuilder{}, DefaultTemplates(), t)
}
