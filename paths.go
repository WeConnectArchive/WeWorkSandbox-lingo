// Code generated by go2go; DO NOT EDIT.


//line paths.go2:1
package lingo

//line paths.go2:1
import (
//line paths.go2:1
 "encoding/json"
//line paths.go2:1
 "fmt"
//line paths.go2:1
 "reflect"
//line paths.go2:1
 "strconv"
//line paths.go2:1
 "strings"
//line paths.go2:1
 "sync/atomic"
//line paths.go2:1
 "testing"
//line paths.go2:1
)

//line paths.go2:8
type PathType int

func (p PathType) Type() reflect.Type {
	return reflect.TypeOf(p)
}

const (
	Unknown PathType = iota

	ArrayValue
	ArrayValueConstant
	CollectionAny
	Delegate
	ListValue
	ListValueConstant
	MapValue
	MapValueConstant
	Property
	Variable
)

func NewPathMetadataForVariable(varName string) PathMetadata {
//line paths.go2:29
 return NewPathMetadata(Variable, varName, nil)
//line paths.go2:29
}
func NewPathMetadataForProperty(propName string, parent PathMetadata) PathMetadata {
//line paths.go2:30
 return NewPathMetadata(Property, propName, &parent)
//line paths.go2:30
}
func NewPathMetadata(pt PathType, element interface{}, parent *PathMetadata) PathMetadata {
	var root *PathMetadata
	if parent != nil {
		root = parent.Root()
	}
	return PathMetadata{
		pathType: pt,
		root:     root,
		parent:   parent,
		element:  element,
	}
}

//line paths.go2:43
type PathMetadata struct {
	pathType PathType
	root     *PathMetadata
	parent   *PathMetadata
	element  interface{}
}

//line paths.go2:49
func (pm PathMetadata) Type() reflect.Type { return reflect.TypeOf(pm.pathType) }
func (pm PathMetadata) PathType() PathType                     { return pm.pathType }
func (pm PathMetadata) Parent() *PathMetadata                  { return pm.parent }
func (pm PathMetadata) Root() *PathMetadata                    { return pm.root }
func (pm PathMetadata) IsRoot() bool {
	return pm.parent == nil && (pm.pathType == Delegate && pm.parent.IsRoot())
}
func (pm PathMetadata) Element() interface{} { return pm.element }
func (pm PathMetadata) Name() string {
	switch pm.pathType {
	case Variable, Property:
		return pm.element.(string)
	}
	panic(fmt.Sprintf("name property not available for path type %d, must be accessed with Element()", pm.pathType))
}

//line paths.go2:67
type Path interface {
	Type() reflect.Type
	Metadata()
}

//line paths.go2:88
func NewBoolPath(p instantiate୦୦SimplePath୦bool,) BoolPath {
	return BoolPath(p)
}

//line paths.go2:91
type BoolPath instantiate୦୦SimplePath୦bool

//line paths.go2:92
func (p BoolPath) Type() reflect.Type { return reflect.TypeOf(p) }
func (p BoolPath) EqValue(v bool) BooleanExpression {
	return BooleanExpression(nil)
}
func (p BoolPath) Eq(v instantiate୦୦TypedExpression୦bool,) BooleanExpression {
	return NewOpEqual(p, v)
}

//line paths.go2:98
type instantiate୦୦SimplePath୦bool struct {
//line paths.go2:80
 value bool
			pm    PathMetadata
}

//line paths.go2:83
func (p instantiate୦୦SimplePath୦bool,) Type() reflect.Type { return reflect.TypeOf(p.value) }
func (p instantiate୦୦SimplePath୦bool,) Metadata() PathMetadata                 { return p.pm }

//line paths.go2:84
var _ = json.Compact
//line paths.go2:84
var _ = fmt.Errorf
//line paths.go2:84
var _ = reflect.Append
//line paths.go2:84
var _ = strconv.AppendBool

//line paths.go2:84
type _ strings.Builder

//line paths.go2:84
var _ = atomic.AddInt32
//line paths.go2:84
var _ = testing.AllocsPerRun
