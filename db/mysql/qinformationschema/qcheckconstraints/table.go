// Code generated by Lingo for table information_schema.CHECK_CONSTRAINTS - DO NOT EDIT

package qcheckconstraints

import (
	"github.com/weworksandbox/lingo/core"
	"github.com/weworksandbox/lingo/core/path"
)

func As(alias string) QCheckConstraints {
	return newQCheckConstraints(alias)
}

func New() QCheckConstraints {
	return newQCheckConstraints("")
}

func newQCheckConstraints(alias string) QCheckConstraints {
	q := QCheckConstraints{_alias: alias}
	q.constraintCatalog = path.NewStringPath(q, "CONSTRAINT_CATALOG")
	q.constraintSchema = path.NewStringPath(q, "CONSTRAINT_SCHEMA")
	q.constraintName = path.NewStringPath(q, "CONSTRAINT_NAME")
	q.checkClause = path.NewStringPath(q, "CHECK_CLAUSE")
	return q
}

type QCheckConstraints struct {
	_alias            string
	constraintCatalog path.StringPath
	constraintSchema  path.StringPath
	constraintName    path.StringPath
	checkClause       path.StringPath
}

// core.Table Functions

func (q QCheckConstraints) GetColumns() []core.Column {
	return []core.Column{
		q.constraintCatalog,
		q.constraintSchema,
		q.constraintName,
		q.checkClause,
	}
}

func (q QCheckConstraints) GetSQL(d core.Dialect, sql core.SQL) error {
	return path.ExpandTableWithDialect(d, q, sql)
}

func (q QCheckConstraints) GetAlias() string {
	return q._alias
}

func (q QCheckConstraints) GetName() string {
	return "CHECK_CONSTRAINTS"
}

func (q QCheckConstraints) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QCheckConstraints) ConstraintCatalog() path.StringPath {
	return q.constraintCatalog
}

func (q QCheckConstraints) ConstraintSchema() path.StringPath {
	return q.constraintSchema
}

func (q QCheckConstraints) ConstraintName() path.StringPath {
	return q.constraintName
}

func (q QCheckConstraints) CheckClause() path.StringPath {
	return q.checkClause
}
