// Code generated by Lingo for table information_schema.INNODB_BUFFER_PAGE_LRU - DO NOT EDIT

package qinnodbbufferpagelru

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QInnodbBufferPageLru {
	return newQInnodbBufferPageLru(alias)
}

func New() QInnodbBufferPageLru {
	return newQInnodbBufferPageLru("")
}

func newQInnodbBufferPageLru(alias string) QInnodbBufferPageLru {
	q := QInnodbBufferPageLru{_alias: alias}
	q.poolId = path.NewInt64Path(q, "POOL_ID")
	q.lruPosition = path.NewInt64Path(q, "LRU_POSITION")
	q.space = path.NewInt64Path(q, "SPACE")
	q.pageNumber = path.NewInt64Path(q, "PAGE_NUMBER")
	q.pageType = path.NewStringPath(q, "PAGE_TYPE")
	q.flushType = path.NewInt64Path(q, "FLUSH_TYPE")
	q.fixCount = path.NewInt64Path(q, "FIX_COUNT")
	q.isHashed = path.NewStringPath(q, "IS_HASHED")
	q.newestModification = path.NewInt64Path(q, "NEWEST_MODIFICATION")
	q.oldestModification = path.NewInt64Path(q, "OLDEST_MODIFICATION")
	q.accessTime = path.NewInt64Path(q, "ACCESS_TIME")
	q.tableName = path.NewStringPath(q, "TABLE_NAME")
	q.indexName = path.NewStringPath(q, "INDEX_NAME")
	q.numberRecords = path.NewInt64Path(q, "NUMBER_RECORDS")
	q.dataSize = path.NewInt64Path(q, "DATA_SIZE")
	q.compressedSize = path.NewInt64Path(q, "COMPRESSED_SIZE")
	q.compressed = path.NewStringPath(q, "COMPRESSED")
	q.ioFix = path.NewStringPath(q, "IO_FIX")
	q.isOld = path.NewStringPath(q, "IS_OLD")
	q.freePageClock = path.NewInt64Path(q, "FREE_PAGE_CLOCK")
	return q
}

type QInnodbBufferPageLru struct {
	_alias             string
	poolId             path.Int64Path
	lruPosition        path.Int64Path
	space              path.Int64Path
	pageNumber         path.Int64Path
	pageType           path.StringPath
	flushType          path.Int64Path
	fixCount           path.Int64Path
	isHashed           path.StringPath
	newestModification path.Int64Path
	oldestModification path.Int64Path
	accessTime         path.Int64Path
	tableName          path.StringPath
	indexName          path.StringPath
	numberRecords      path.Int64Path
	dataSize           path.Int64Path
	compressedSize     path.Int64Path
	compressed         path.StringPath
	ioFix              path.StringPath
	isOld              path.StringPath
	freePageClock      path.Int64Path
}

// core.Table Functions

func (q QInnodbBufferPageLru) GetColumns() []core.Column {
	return []core.Column{
		q.poolId,
		q.lruPosition,
		q.space,
		q.pageNumber,
		q.pageType,
		q.flushType,
		q.fixCount,
		q.isHashed,
		q.newestModification,
		q.oldestModification,
		q.accessTime,
		q.tableName,
		q.indexName,
		q.numberRecords,
		q.dataSize,
		q.compressedSize,
		q.compressed,
		q.ioFix,
		q.isOld,
		q.freePageClock,
	}
}

func (q QInnodbBufferPageLru) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QInnodbBufferPageLru) GetAlias() string {
	return q._alias
}

func (q QInnodbBufferPageLru) GetName() string {
	return "INNODB_BUFFER_PAGE_LRU"
}

func (q QInnodbBufferPageLru) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QInnodbBufferPageLru) PoolId() path.Int64Path {
	return q.poolId
}

func (q QInnodbBufferPageLru) LruPosition() path.Int64Path {
	return q.lruPosition
}

func (q QInnodbBufferPageLru) Space() path.Int64Path {
	return q.space
}

func (q QInnodbBufferPageLru) PageNumber() path.Int64Path {
	return q.pageNumber
}

func (q QInnodbBufferPageLru) PageType() path.StringPath {
	return q.pageType
}

func (q QInnodbBufferPageLru) FlushType() path.Int64Path {
	return q.flushType
}

func (q QInnodbBufferPageLru) FixCount() path.Int64Path {
	return q.fixCount
}

func (q QInnodbBufferPageLru) IsHashed() path.StringPath {
	return q.isHashed
}

func (q QInnodbBufferPageLru) NewestModification() path.Int64Path {
	return q.newestModification
}

func (q QInnodbBufferPageLru) OldestModification() path.Int64Path {
	return q.oldestModification
}

func (q QInnodbBufferPageLru) AccessTime() path.Int64Path {
	return q.accessTime
}

func (q QInnodbBufferPageLru) TableName() path.StringPath {
	return q.tableName
}

func (q QInnodbBufferPageLru) IndexName() path.StringPath {
	return q.indexName
}

func (q QInnodbBufferPageLru) NumberRecords() path.Int64Path {
	return q.numberRecords
}

func (q QInnodbBufferPageLru) DataSize() path.Int64Path {
	return q.dataSize
}

func (q QInnodbBufferPageLru) CompressedSize() path.Int64Path {
	return q.compressedSize
}

func (q QInnodbBufferPageLru) Compressed() path.StringPath {
	return q.compressed
}

func (q QInnodbBufferPageLru) IoFix() path.StringPath {
	return q.ioFix
}

func (q QInnodbBufferPageLru) IsOld() path.StringPath {
	return q.isOld
}

func (q QInnodbBufferPageLru) FreePageClock() path.Int64Path {
	return q.freePageClock
}
