// Code generated by Lingo for table information_schema.INNODB_CMP_RESET - DO NOT EDIT

package qinnodbcmpreset

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QInnodbCmpReset {
	return newQInnodbCmpReset(alias)
}

func New() QInnodbCmpReset {
	return newQInnodbCmpReset("")
}

func newQInnodbCmpReset(alias string) QInnodbCmpReset {
	q := QInnodbCmpReset{_alias: alias}
	q.pageSize = path.NewIntPath(q, "page_size")
	q.compressOps = path.NewIntPath(q, "compress_ops")
	q.compressOpsOk = path.NewIntPath(q, "compress_ops_ok")
	q.compressTime = path.NewIntPath(q, "compress_time")
	q.uncompressOps = path.NewIntPath(q, "uncompress_ops")
	q.uncompressTime = path.NewIntPath(q, "uncompress_time")
	return q
}

type QInnodbCmpReset struct {
	_alias         string
	pageSize       path.Int
	compressOps    path.Int
	compressOpsOk  path.Int
	compressTime   path.Int
	uncompressOps  path.Int
	uncompressTime path.Int
}

// core.Table Functions

func (q QInnodbCmpReset) GetColumns() []core.Column {
	return []core.Column{
		q.pageSize,
		q.compressOps,
		q.compressOpsOk,
		q.compressTime,
		q.uncompressOps,
		q.uncompressTime,
	}
}

func (q QInnodbCmpReset) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QInnodbCmpReset) GetAlias() string {
	return q._alias
}

func (q QInnodbCmpReset) GetName() string {
	return "INNODB_CMP_RESET"
}

func (q QInnodbCmpReset) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QInnodbCmpReset) PageSize() path.Int {
	return q.pageSize
}

func (q QInnodbCmpReset) CompressOps() path.Int {
	return q.compressOps
}

func (q QInnodbCmpReset) CompressOpsOk() path.Int {
	return q.compressOpsOk
}

func (q QInnodbCmpReset) CompressTime() path.Int {
	return q.compressTime
}

func (q QInnodbCmpReset) UncompressOps() path.Int {
	return q.uncompressOps
}

func (q QInnodbCmpReset) UncompressTime() path.Int {
	return q.uncompressTime
}
