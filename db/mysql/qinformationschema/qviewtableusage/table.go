// Code generated by Lingo for table information_schema.VIEW_TABLE_USAGE - DO NOT EDIT

package qviewtableusage

import (
	"github.com/weworksandbox/lingo/core"
	"github.com/weworksandbox/lingo/core/path"
)

func As(alias string) QViewTableUsage {
	return newQViewTableUsage(alias)
}

func New() QViewTableUsage {
	return newQViewTableUsage("")
}

func newQViewTableUsage(alias string) QViewTableUsage {
	q := QViewTableUsage{_alias: alias}
	q.viewCatalog = path.NewStringPath(q, "VIEW_CATALOG")
	q.viewSchema = path.NewStringPath(q, "VIEW_SCHEMA")
	q.viewName = path.NewStringPath(q, "VIEW_NAME")
	q.tableCatalog = path.NewStringPath(q, "TABLE_CATALOG")
	q.tableSchema = path.NewStringPath(q, "TABLE_SCHEMA")
	q.tableName = path.NewStringPath(q, "TABLE_NAME")
	return q
}

type QViewTableUsage struct {
	_alias       string
	viewCatalog  path.StringPath
	viewSchema   path.StringPath
	viewName     path.StringPath
	tableCatalog path.StringPath
	tableSchema  path.StringPath
	tableName    path.StringPath
}

// core.Table Functions

func (q QViewTableUsage) GetColumns() []core.Column {
	return []core.Column{
		q.viewCatalog,
		q.viewSchema,
		q.viewName,
		q.tableCatalog,
		q.tableSchema,
		q.tableName,
	}
}

func (q QViewTableUsage) GetSQL(d core.Dialect, sql core.SQL) error {
	return path.ExpandTableWithDialect(d, q, sql)
}

func (q QViewTableUsage) GetAlias() string {
	return q._alias
}

func (q QViewTableUsage) GetName() string {
	return "VIEW_TABLE_USAGE"
}

func (q QViewTableUsage) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QViewTableUsage) ViewCatalog() path.StringPath {
	return q.viewCatalog
}

func (q QViewTableUsage) ViewSchema() path.StringPath {
	return q.viewSchema
}

func (q QViewTableUsage) ViewName() path.StringPath {
	return q.viewName
}

func (q QViewTableUsage) TableCatalog() path.StringPath {
	return q.tableCatalog
}

func (q QViewTableUsage) TableSchema() path.StringPath {
	return q.tableSchema
}

func (q QViewTableUsage) TableName() path.StringPath {
	return q.tableName
}
