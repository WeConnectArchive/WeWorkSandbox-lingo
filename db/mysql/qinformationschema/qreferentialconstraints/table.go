// Code generated by Lingo for table information_schema.REFERENTIAL_CONSTRAINTS - DO NOT EDIT

package qreferentialconstraints

import (
	"github.com/weworksandbox/lingo/core"
	"github.com/weworksandbox/lingo/core/path"
)

func As(alias string) QReferentialConstraints {
	return newQReferentialConstraints(alias)
}

func New() QReferentialConstraints {
	return newQReferentialConstraints("")
}

func newQReferentialConstraints(alias string) QReferentialConstraints {
	q := QReferentialConstraints{_alias: alias}
	q.constraintCatalog = path.NewStringPath(q, "CONSTRAINT_CATALOG")
	q.constraintSchema = path.NewStringPath(q, "CONSTRAINT_SCHEMA")
	q.constraintName = path.NewStringPath(q, "CONSTRAINT_NAME")
	q.uniqueConstraintCatalog = path.NewStringPath(q, "UNIQUE_CONSTRAINT_CATALOG")
	q.uniqueConstraintSchema = path.NewStringPath(q, "UNIQUE_CONSTRAINT_SCHEMA")
	q.uniqueConstraintName = path.NewStringPath(q, "UNIQUE_CONSTRAINT_NAME")
	q.matchOption = path.NewStringPath(q, "MATCH_OPTION")
	q.updateRule = path.NewStringPath(q, "UPDATE_RULE")
	q.deleteRule = path.NewStringPath(q, "DELETE_RULE")
	q.tableName = path.NewStringPath(q, "TABLE_NAME")
	q.referencedTableName = path.NewStringPath(q, "REFERENCED_TABLE_NAME")
	return q
}

type QReferentialConstraints struct {
	_alias                  string
	constraintCatalog       path.StringPath
	constraintSchema        path.StringPath
	constraintName          path.StringPath
	uniqueConstraintCatalog path.StringPath
	uniqueConstraintSchema  path.StringPath
	uniqueConstraintName    path.StringPath
	matchOption             path.StringPath
	updateRule              path.StringPath
	deleteRule              path.StringPath
	tableName               path.StringPath
	referencedTableName     path.StringPath
}

// core.Table Functions

func (q QReferentialConstraints) GetColumns() []core.Column {
	return []core.Column{
		q.constraintCatalog,
		q.constraintSchema,
		q.constraintName,
		q.uniqueConstraintCatalog,
		q.uniqueConstraintSchema,
		q.uniqueConstraintName,
		q.matchOption,
		q.updateRule,
		q.deleteRule,
		q.tableName,
		q.referencedTableName,
	}
}

func (q QReferentialConstraints) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QReferentialConstraints) GetAlias() string {
	return q._alias
}

func (q QReferentialConstraints) GetName() string {
	return "REFERENTIAL_CONSTRAINTS"
}

func (q QReferentialConstraints) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QReferentialConstraints) ConstraintCatalog() path.StringPath {
	return q.constraintCatalog
}

func (q QReferentialConstraints) ConstraintSchema() path.StringPath {
	return q.constraintSchema
}

func (q QReferentialConstraints) ConstraintName() path.StringPath {
	return q.constraintName
}

func (q QReferentialConstraints) UniqueConstraintCatalog() path.StringPath {
	return q.uniqueConstraintCatalog
}

func (q QReferentialConstraints) UniqueConstraintSchema() path.StringPath {
	return q.uniqueConstraintSchema
}

func (q QReferentialConstraints) UniqueConstraintName() path.StringPath {
	return q.uniqueConstraintName
}

func (q QReferentialConstraints) MatchOption() path.StringPath {
	return q.matchOption
}

func (q QReferentialConstraints) UpdateRule() path.StringPath {
	return q.updateRule
}

func (q QReferentialConstraints) DeleteRule() path.StringPath {
	return q.deleteRule
}

func (q QReferentialConstraints) TableName() path.StringPath {
	return q.tableName
}

func (q QReferentialConstraints) ReferencedTableName() path.StringPath {
	return q.referencedTableName
}
