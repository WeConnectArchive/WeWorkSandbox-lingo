// Code generated by Lingo for table information_schema.INNODB_CMP_PER_INDEX_RESET - DO NOT EDIT

package qinnodbcmpperindexreset

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QInnodbCmpPerIndexReset {
	return newQInnodbCmpPerIndexReset(alias)
}

func New() QInnodbCmpPerIndexReset {
	return newQInnodbCmpPerIndexReset("")
}

func newQInnodbCmpPerIndexReset(alias string) QInnodbCmpPerIndexReset {
	q := QInnodbCmpPerIndexReset{_alias: alias}
	q.databaseName = path.NewStringPath(q, "database_name")
	q.tableName = path.NewStringPath(q, "table_name")
	q.indexName = path.NewStringPath(q, "index_name")
	q.compressOps = path.NewIntPath(q, "compress_ops")
	q.compressOpsOk = path.NewIntPath(q, "compress_ops_ok")
	q.compressTime = path.NewIntPath(q, "compress_time")
	q.uncompressOps = path.NewIntPath(q, "uncompress_ops")
	q.uncompressTime = path.NewIntPath(q, "uncompress_time")
	return q
}

type QInnodbCmpPerIndexReset struct {
	_alias         string
	databaseName   path.String
	tableName      path.String
	indexName      path.String
	compressOps    path.Int
	compressOpsOk  path.Int
	compressTime   path.Int
	uncompressOps  path.Int
	uncompressTime path.Int
}

// core.Table Functions

func (q QInnodbCmpPerIndexReset) GetColumns() []core.Column {
	return []core.Column{
		q.databaseName,
		q.tableName,
		q.indexName,
		q.compressOps,
		q.compressOpsOk,
		q.compressTime,
		q.uncompressOps,
		q.uncompressTime,
	}
}

func (q QInnodbCmpPerIndexReset) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QInnodbCmpPerIndexReset) GetAlias() string {
	return q._alias
}

func (q QInnodbCmpPerIndexReset) GetName() string {
	return "INNODB_CMP_PER_INDEX_RESET"
}

func (q QInnodbCmpPerIndexReset) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QInnodbCmpPerIndexReset) DatabaseName() path.String {
	return q.databaseName
}

func (q QInnodbCmpPerIndexReset) TableName() path.String {
	return q.tableName
}

func (q QInnodbCmpPerIndexReset) IndexName() path.String {
	return q.indexName
}

func (q QInnodbCmpPerIndexReset) CompressOps() path.Int {
	return q.compressOps
}

func (q QInnodbCmpPerIndexReset) CompressOpsOk() path.Int {
	return q.compressOpsOk
}

func (q QInnodbCmpPerIndexReset) CompressTime() path.Int {
	return q.compressTime
}

func (q QInnodbCmpPerIndexReset) UncompressOps() path.Int {
	return q.uncompressOps
}

func (q QInnodbCmpPerIndexReset) UncompressTime() path.Int {
	return q.uncompressTime
}
