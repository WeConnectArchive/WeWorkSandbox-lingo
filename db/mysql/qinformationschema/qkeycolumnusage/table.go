// Code generated by Lingo for table information_schema.KEY_COLUMN_USAGE - DO NOT EDIT

package qkeycolumnusage

import (
	"github.com/weworksandbox/lingo/core"
	"github.com/weworksandbox/lingo/core/path"
)

func As(alias string) QKeyColumnUsage {
	return newQKeyColumnUsage(alias)
}

func New() QKeyColumnUsage {
	return newQKeyColumnUsage("")
}

func newQKeyColumnUsage(alias string) QKeyColumnUsage {
	q := QKeyColumnUsage{_alias: alias}
	q.constraintCatalog = path.NewStringPath(q, "CONSTRAINT_CATALOG")
	q.constraintSchema = path.NewStringPath(q, "CONSTRAINT_SCHEMA")
	q.constraintName = path.NewStringPath(q, "CONSTRAINT_NAME")
	q.tableCatalog = path.NewStringPath(q, "TABLE_CATALOG")
	q.tableSchema = path.NewStringPath(q, "TABLE_SCHEMA")
	q.tableName = path.NewStringPath(q, "TABLE_NAME")
	q.columnName = path.NewStringPath(q, "COLUMN_NAME")
	q.ordinalPosition = path.NewInt64Path(q, "ORDINAL_POSITION")
	q.positionInUniqueConstraint = path.NewInt64Path(q, "POSITION_IN_UNIQUE_CONSTRAINT")
	q.referencedTableSchema = path.NewStringPath(q, "REFERENCED_TABLE_SCHEMA")
	q.referencedTableName = path.NewStringPath(q, "REFERENCED_TABLE_NAME")
	q.referencedColumnName = path.NewStringPath(q, "REFERENCED_COLUMN_NAME")
	return q
}

type QKeyColumnUsage struct {
	_alias                     string
	constraintCatalog          path.StringPath
	constraintSchema           path.StringPath
	constraintName             path.StringPath
	tableCatalog               path.StringPath
	tableSchema                path.StringPath
	tableName                  path.StringPath
	columnName                 path.StringPath
	ordinalPosition            path.Int64Path
	positionInUniqueConstraint path.Int64Path
	referencedTableSchema      path.StringPath
	referencedTableName        path.StringPath
	referencedColumnName       path.StringPath
}

// core.Table Functions

func (q QKeyColumnUsage) GetColumns() []core.Column {
	return []core.Column{
		q.constraintCatalog,
		q.constraintSchema,
		q.constraintName,
		q.tableCatalog,
		q.tableSchema,
		q.tableName,
		q.columnName,
		q.ordinalPosition,
		q.positionInUniqueConstraint,
		q.referencedTableSchema,
		q.referencedTableName,
		q.referencedColumnName,
	}
}

func (q QKeyColumnUsage) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QKeyColumnUsage) GetAlias() string {
	return q._alias
}

func (q QKeyColumnUsage) GetName() string {
	return "KEY_COLUMN_USAGE"
}

func (q QKeyColumnUsage) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QKeyColumnUsage) ConstraintCatalog() path.StringPath {
	return q.constraintCatalog
}

func (q QKeyColumnUsage) ConstraintSchema() path.StringPath {
	return q.constraintSchema
}

func (q QKeyColumnUsage) ConstraintName() path.StringPath {
	return q.constraintName
}

func (q QKeyColumnUsage) TableCatalog() path.StringPath {
	return q.tableCatalog
}

func (q QKeyColumnUsage) TableSchema() path.StringPath {
	return q.tableSchema
}

func (q QKeyColumnUsage) TableName() path.StringPath {
	return q.tableName
}

func (q QKeyColumnUsage) ColumnName() path.StringPath {
	return q.columnName
}

func (q QKeyColumnUsage) OrdinalPosition() path.Int64Path {
	return q.ordinalPosition
}

func (q QKeyColumnUsage) PositionInUniqueConstraint() path.Int64Path {
	return q.positionInUniqueConstraint
}

func (q QKeyColumnUsage) ReferencedTableSchema() path.StringPath {
	return q.referencedTableSchema
}

func (q QKeyColumnUsage) ReferencedTableName() path.StringPath {
	return q.referencedTableName
}

func (q QKeyColumnUsage) ReferencedColumnName() path.StringPath {
	return q.referencedColumnName
}
