// Code generated by Lingo for table information_schema.INNODB_CMP_PER_INDEX - DO NOT EDIT

package qinnodbcmpperindex

import (
	"github.com/weworksandbox/lingo/core"
	"github.com/weworksandbox/lingo/core/path"
)

func As(alias string) QInnodbCmpPerIndex {
	return newQInnodbCmpPerIndex(alias)
}

func New() QInnodbCmpPerIndex {
	return newQInnodbCmpPerIndex("")
}

func newQInnodbCmpPerIndex(alias string) QInnodbCmpPerIndex {
	q := QInnodbCmpPerIndex{_alias: alias}
	q.databaseName = path.NewStringPath(q, "database_name")
	q.tableName = path.NewStringPath(q, "table_name")
	q.indexName = path.NewStringPath(q, "index_name")
	q.compressOps = path.NewIntPath(q, "compress_ops")
	q.compressOpsOk = path.NewIntPath(q, "compress_ops_ok")
	q.compressTime = path.NewIntPath(q, "compress_time")
	q.uncompressOps = path.NewIntPath(q, "uncompress_ops")
	q.uncompressTime = path.NewIntPath(q, "uncompress_time")
	return q
}

type QInnodbCmpPerIndex struct {
	_alias         string
	databaseName   path.StringPath
	tableName      path.StringPath
	indexName      path.StringPath
	compressOps    path.IntPath
	compressOpsOk  path.IntPath
	compressTime   path.IntPath
	uncompressOps  path.IntPath
	uncompressTime path.IntPath
}

// core.Table Functions

func (q QInnodbCmpPerIndex) GetColumns() []core.Column {
	return []core.Column{
		q.databaseName,
		q.tableName,
		q.indexName,
		q.compressOps,
		q.compressOpsOk,
		q.compressTime,
		q.uncompressOps,
		q.uncompressTime,
	}
}

func (q QInnodbCmpPerIndex) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QInnodbCmpPerIndex) GetAlias() string {
	return q._alias
}

func (q QInnodbCmpPerIndex) GetName() string {
	return "INNODB_CMP_PER_INDEX"
}

func (q QInnodbCmpPerIndex) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QInnodbCmpPerIndex) DatabaseName() path.StringPath {
	return q.databaseName
}

func (q QInnodbCmpPerIndex) TableName() path.StringPath {
	return q.tableName
}

func (q QInnodbCmpPerIndex) IndexName() path.StringPath {
	return q.indexName
}

func (q QInnodbCmpPerIndex) CompressOps() path.IntPath {
	return q.compressOps
}

func (q QInnodbCmpPerIndex) CompressOpsOk() path.IntPath {
	return q.compressOpsOk
}

func (q QInnodbCmpPerIndex) CompressTime() path.IntPath {
	return q.compressTime
}

func (q QInnodbCmpPerIndex) UncompressOps() path.IntPath {
	return q.uncompressOps
}

func (q QInnodbCmpPerIndex) UncompressTime() path.IntPath {
	return q.uncompressTime
}
