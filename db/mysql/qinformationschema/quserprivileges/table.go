// Code generated by Lingo for table information_schema.USER_PRIVILEGES - DO NOT EDIT

package quserprivileges

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QUserPrivileges {
	return newQUserPrivileges(alias)
}

func New() QUserPrivileges {
	return newQUserPrivileges("")
}

func newQUserPrivileges(alias string) QUserPrivileges {
	q := QUserPrivileges{_alias: alias}
	q.grantee = path.NewStringPath(q, "GRANTEE")
	q.tableCatalog = path.NewStringPath(q, "TABLE_CATALOG")
	q.privilegeType = path.NewStringPath(q, "PRIVILEGE_TYPE")
	q.isGrantable = path.NewStringPath(q, "IS_GRANTABLE")
	return q
}

type QUserPrivileges struct {
	_alias        string
	grantee       path.String
	tableCatalog  path.String
	privilegeType path.String
	isGrantable   path.String
}

// core.Table Functions

func (q QUserPrivileges) GetColumns() []core.Column {
	return []core.Column{
		q.grantee,
		q.tableCatalog,
		q.privilegeType,
		q.isGrantable,
	}
}

func (q QUserPrivileges) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QUserPrivileges) GetAlias() string {
	return q._alias
}

func (q QUserPrivileges) GetName() string {
	return "USER_PRIVILEGES"
}

func (q QUserPrivileges) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QUserPrivileges) Grantee() path.String {
	return q.grantee
}

func (q QUserPrivileges) TableCatalog() path.String {
	return q.tableCatalog
}

func (q QUserPrivileges) PrivilegeType() path.String {
	return q.privilegeType
}

func (q QUserPrivileges) IsGrantable() path.String {
	return q.isGrantable
}
