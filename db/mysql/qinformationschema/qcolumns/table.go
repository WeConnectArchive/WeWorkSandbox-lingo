// Code generated by Lingo for table information_schema.COLUMNS - DO NOT EDIT

package qcolumns

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QColumns {
	return newQColumns(alias)
}

func New() QColumns {
	return newQColumns("")
}

func newQColumns(alias string) QColumns {
	q := QColumns{_alias: alias}
	q.tableCatalog = path.NewStringPath(q, "TABLE_CATALOG")
	q.tableSchema = path.NewStringPath(q, "TABLE_SCHEMA")
	q.tableName = path.NewStringPath(q, "TABLE_NAME")
	q.columnName = path.NewStringPath(q, "COLUMN_NAME")
	q.ordinalPosition = path.NewInt64Path(q, "ORDINAL_POSITION")
	q.columnDefault = path.NewStringPath(q, "COLUMN_DEFAULT")
	q.isNullable = path.NewStringPath(q, "IS_NULLABLE")
	q.dataType = path.NewStringPath(q, "DATA_TYPE")
	q.characterMaximumLength = path.NewInt64Path(q, "CHARACTER_MAXIMUM_LENGTH")
	q.characterOctetLength = path.NewInt64Path(q, "CHARACTER_OCTET_LENGTH")
	q.numericPrecision = path.NewInt64Path(q, "NUMERIC_PRECISION")
	q.numericScale = path.NewInt64Path(q, "NUMERIC_SCALE")
	q.datetimePrecision = path.NewInt64Path(q, "DATETIME_PRECISION")
	q.characterSetName = path.NewStringPath(q, "CHARACTER_SET_NAME")
	q.collationName = path.NewStringPath(q, "COLLATION_NAME")
	q.columnType = path.NewStringPath(q, "COLUMN_TYPE")
	q.columnKey = path.NewStringPath(q, "COLUMN_KEY")
	q.extra = path.NewStringPath(q, "EXTRA")
	q.privileges = path.NewStringPath(q, "PRIVILEGES")
	q.columnComment = path.NewStringPath(q, "COLUMN_COMMENT")
	q.generationExpression = path.NewStringPath(q, "GENERATION_EXPRESSION")
	return q
}

type QColumns struct {
	_alias                 string
	tableCatalog           path.String
	tableSchema            path.String
	tableName              path.String
	columnName             path.String
	ordinalPosition        path.Int64
	columnDefault          path.String
	isNullable             path.String
	dataType               path.String
	characterMaximumLength path.Int64
	characterOctetLength   path.Int64
	numericPrecision       path.Int64
	numericScale           path.Int64
	datetimePrecision      path.Int64
	characterSetName       path.String
	collationName          path.String
	columnType             path.String
	columnKey              path.String
	extra                  path.String
	privileges             path.String
	columnComment          path.String
	generationExpression   path.String
}

// core.Table Functions

func (q QColumns) GetColumns() []core.Column {
	return []core.Column{
		q.tableCatalog,
		q.tableSchema,
		q.tableName,
		q.columnName,
		q.ordinalPosition,
		q.columnDefault,
		q.isNullable,
		q.dataType,
		q.characterMaximumLength,
		q.characterOctetLength,
		q.numericPrecision,
		q.numericScale,
		q.datetimePrecision,
		q.characterSetName,
		q.collationName,
		q.columnType,
		q.columnKey,
		q.extra,
		q.privileges,
		q.columnComment,
		q.generationExpression,
	}
}

func (q QColumns) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QColumns) GetAlias() string {
	return q._alias
}

func (q QColumns) GetName() string {
	return "COLUMNS"
}

func (q QColumns) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QColumns) TableCatalog() path.String {
	return q.tableCatalog
}

func (q QColumns) TableSchema() path.String {
	return q.tableSchema
}

func (q QColumns) TableName() path.String {
	return q.tableName
}

func (q QColumns) ColumnName() path.String {
	return q.columnName
}

func (q QColumns) OrdinalPosition() path.Int64 {
	return q.ordinalPosition
}

func (q QColumns) ColumnDefault() path.String {
	return q.columnDefault
}

func (q QColumns) IsNullable() path.String {
	return q.isNullable
}

func (q QColumns) DataType() path.String {
	return q.dataType
}

func (q QColumns) CharacterMaximumLength() path.Int64 {
	return q.characterMaximumLength
}

func (q QColumns) CharacterOctetLength() path.Int64 {
	return q.characterOctetLength
}

func (q QColumns) NumericPrecision() path.Int64 {
	return q.numericPrecision
}

func (q QColumns) NumericScale() path.Int64 {
	return q.numericScale
}

func (q QColumns) DatetimePrecision() path.Int64 {
	return q.datetimePrecision
}

func (q QColumns) CharacterSetName() path.String {
	return q.characterSetName
}

func (q QColumns) CollationName() path.String {
	return q.collationName
}

func (q QColumns) ColumnType() path.String {
	return q.columnType
}

func (q QColumns) ColumnKey() path.String {
	return q.columnKey
}

func (q QColumns) Extra() path.String {
	return q.extra
}

func (q QColumns) Privileges() path.String {
	return q.privileges
}

func (q QColumns) ColumnComment() path.String {
	return q.columnComment
}

func (q QColumns) GenerationExpression() path.String {
	return q.generationExpression
}
