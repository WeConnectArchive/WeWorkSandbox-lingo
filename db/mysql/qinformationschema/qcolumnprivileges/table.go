// Code generated by Lingo for table information_schema.COLUMN_PRIVILEGES - DO NOT EDIT

package qcolumnprivileges

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QColumnPrivileges {
	return newQColumnPrivileges(alias)
}

func New() QColumnPrivileges {
	return newQColumnPrivileges("")
}

func newQColumnPrivileges(alias string) QColumnPrivileges {
	q := QColumnPrivileges{_alias: alias}
	q.grantee = path.NewStringPath(q, "GRANTEE")
	q.tableCatalog = path.NewStringPath(q, "TABLE_CATALOG")
	q.tableSchema = path.NewStringPath(q, "TABLE_SCHEMA")
	q.tableName = path.NewStringPath(q, "TABLE_NAME")
	q.columnName = path.NewStringPath(q, "COLUMN_NAME")
	q.privilegeType = path.NewStringPath(q, "PRIVILEGE_TYPE")
	q.isGrantable = path.NewStringPath(q, "IS_GRANTABLE")
	return q
}

type QColumnPrivileges struct {
	_alias        string
	grantee       path.String
	tableCatalog  path.String
	tableSchema   path.String
	tableName     path.String
	columnName    path.String
	privilegeType path.String
	isGrantable   path.String
}

// core.Table Functions

func (q QColumnPrivileges) GetColumns() []core.Column {
	return []core.Column{
		q.grantee,
		q.tableCatalog,
		q.tableSchema,
		q.tableName,
		q.columnName,
		q.privilegeType,
		q.isGrantable,
	}
}

func (q QColumnPrivileges) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QColumnPrivileges) GetAlias() string {
	return q._alias
}

func (q QColumnPrivileges) GetName() string {
	return "COLUMN_PRIVILEGES"
}

func (q QColumnPrivileges) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QColumnPrivileges) Grantee() path.String {
	return q.grantee
}

func (q QColumnPrivileges) TableCatalog() path.String {
	return q.tableCatalog
}

func (q QColumnPrivileges) TableSchema() path.String {
	return q.tableSchema
}

func (q QColumnPrivileges) TableName() path.String {
	return q.tableName
}

func (q QColumnPrivileges) ColumnName() path.String {
	return q.columnName
}

func (q QColumnPrivileges) PrivilegeType() path.String {
	return q.privilegeType
}

func (q QColumnPrivileges) IsGrantable() path.String {
	return q.isGrantable
}
