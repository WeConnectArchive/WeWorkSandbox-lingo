// Code generated by Lingo for table information_schema.INNODB_TRX - DO NOT EDIT

package qinnodbtrx

import "github.com/weworksandbox/lingo/pkg/core/path"

var instance = New()

func Q() QInnodbTrx {
	return instance
}

func TrxId() path.StringPath {
	return instance.trxId
}

func TrxState() path.StringPath {
	return instance.trxState
}

func TrxStarted() path.TimePath {
	return instance.trxStarted
}

func TrxRequestedLockId() path.StringPath {
	return instance.trxRequestedLockId
}

func TrxWaitStarted() path.TimePath {
	return instance.trxWaitStarted
}

func TrxWeight() path.Int64Path {
	return instance.trxWeight
}

func TrxMysqlThreadId() path.Int64Path {
	return instance.trxMysqlThreadId
}

func TrxQuery() path.StringPath {
	return instance.trxQuery
}

func TrxOperationState() path.StringPath {
	return instance.trxOperationState
}

func TrxTablesInUse() path.Int64Path {
	return instance.trxTablesInUse
}

func TrxTablesLocked() path.Int64Path {
	return instance.trxTablesLocked
}

func TrxLockStructs() path.Int64Path {
	return instance.trxLockStructs
}

func TrxLockMemoryBytes() path.Int64Path {
	return instance.trxLockMemoryBytes
}

func TrxRowsLocked() path.Int64Path {
	return instance.trxRowsLocked
}

func TrxRowsModified() path.Int64Path {
	return instance.trxRowsModified
}

func TrxConcurrencyTickets() path.Int64Path {
	return instance.trxConcurrencyTickets
}

func TrxIsolationLevel() path.StringPath {
	return instance.trxIsolationLevel
}

func TrxUniqueChecks() path.IntPath {
	return instance.trxUniqueChecks
}

func TrxForeignKeyChecks() path.IntPath {
	return instance.trxForeignKeyChecks
}

func TrxLastForeignKeyError() path.StringPath {
	return instance.trxLastForeignKeyError
}

func TrxAdaptiveHashLatched() path.IntPath {
	return instance.trxAdaptiveHashLatched
}

func TrxAdaptiveHashTimeout() path.Int64Path {
	return instance.trxAdaptiveHashTimeout
}

func TrxIsReadOnly() path.IntPath {
	return instance.trxIsReadOnly
}

func TrxAutocommitNonLocking() path.IntPath {
	return instance.trxAutocommitNonLocking
}
