// Code generated by Lingo for table information_schema.INNODB_METRICS - DO NOT EDIT

package qinnodbmetrics

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QInnodbMetrics {
	return newQInnodbMetrics(alias)
}

func New() QInnodbMetrics {
	return newQInnodbMetrics("")
}

func newQInnodbMetrics(alias string) QInnodbMetrics {
	q := QInnodbMetrics{_alias: alias}
	q.name = path.NewStringPath(q, "NAME")
	q.subsystem = path.NewStringPath(q, "SUBSYSTEM")
	q.count = path.NewInt64Path(q, "COUNT")
	q.maxCount = path.NewInt64Path(q, "MAX_COUNT")
	q.minCount = path.NewInt64Path(q, "MIN_COUNT")
	q.avgCount = path.NewFloat64Path(q, "AVG_COUNT")
	q.countReset = path.NewInt64Path(q, "COUNT_RESET")
	q.maxCountReset = path.NewInt64Path(q, "MAX_COUNT_RESET")
	q.minCountReset = path.NewInt64Path(q, "MIN_COUNT_RESET")
	q.avgCountReset = path.NewFloat64Path(q, "AVG_COUNT_RESET")
	q.timeEnabled = path.NewTimePath(q, "TIME_ENABLED")
	q.timeDisabled = path.NewTimePath(q, "TIME_DISABLED")
	q.timeElapsed = path.NewInt64Path(q, "TIME_ELAPSED")
	q.timeReset = path.NewTimePath(q, "TIME_RESET")
	q.status = path.NewStringPath(q, "STATUS")
	q.__type = path.NewStringPath(q, "TYPE")
	q.comment = path.NewStringPath(q, "COMMENT")
	return q
}

type QInnodbMetrics struct {
	_alias        string
	name          path.String
	subsystem     path.String
	count         path.Int64
	maxCount      path.Int64
	minCount      path.Int64
	avgCount      path.Float64
	countReset    path.Int64
	maxCountReset path.Int64
	minCountReset path.Int64
	avgCountReset path.Float64
	timeEnabled   path.Time
	timeDisabled  path.Time
	timeElapsed   path.Int64
	timeReset     path.Time
	status        path.String
	__type        path.String
	comment       path.String
}

// core.Table Functions

func (q QInnodbMetrics) GetColumns() []core.Column {
	return []core.Column{
		q.name,
		q.subsystem,
		q.count,
		q.maxCount,
		q.minCount,
		q.avgCount,
		q.countReset,
		q.maxCountReset,
		q.minCountReset,
		q.avgCountReset,
		q.timeEnabled,
		q.timeDisabled,
		q.timeElapsed,
		q.timeReset,
		q.status,
		q.__type,
		q.comment,
	}
}

func (q QInnodbMetrics) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QInnodbMetrics) GetAlias() string {
	return q._alias
}

func (q QInnodbMetrics) GetName() string {
	return "INNODB_METRICS"
}

func (q QInnodbMetrics) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QInnodbMetrics) Name() path.String {
	return q.name
}

func (q QInnodbMetrics) Subsystem() path.String {
	return q.subsystem
}

func (q QInnodbMetrics) Count() path.Int64 {
	return q.count
}

func (q QInnodbMetrics) MaxCount() path.Int64 {
	return q.maxCount
}

func (q QInnodbMetrics) MinCount() path.Int64 {
	return q.minCount
}

func (q QInnodbMetrics) AvgCount() path.Float64 {
	return q.avgCount
}

func (q QInnodbMetrics) CountReset() path.Int64 {
	return q.countReset
}

func (q QInnodbMetrics) MaxCountReset() path.Int64 {
	return q.maxCountReset
}

func (q QInnodbMetrics) MinCountReset() path.Int64 {
	return q.minCountReset
}

func (q QInnodbMetrics) AvgCountReset() path.Float64 {
	return q.avgCountReset
}

func (q QInnodbMetrics) TimeEnabled() path.Time {
	return q.timeEnabled
}

func (q QInnodbMetrics) TimeDisabled() path.Time {
	return q.timeDisabled
}

func (q QInnodbMetrics) TimeElapsed() path.Int64 {
	return q.timeElapsed
}

func (q QInnodbMetrics) TimeReset() path.Time {
	return q.timeReset
}

func (q QInnodbMetrics) Status() path.String {
	return q.status
}

func (q QInnodbMetrics) Type() path.String {
	return q.__type
}

func (q QInnodbMetrics) Comment() path.String {
	return q.comment
}
