// Code generated by Lingo for table information_schema.INNODB_TABLESPACES - DO NOT EDIT

package qinnodbtablespaces

import (
	"github.com/weworksandbox/lingo/core"
	"github.com/weworksandbox/lingo/core/path"
)

func As(alias string) QInnodbTablespaces {
	return newQInnodbTablespaces(alias)
}

func New() QInnodbTablespaces {
	return newQInnodbTablespaces("")
}

func newQInnodbTablespaces(alias string) QInnodbTablespaces {
	q := QInnodbTablespaces{_alias: alias}
	q.space = path.NewIntPath(q, "SPACE")
	q.name = path.NewStringPath(q, "NAME")
	q.flag = path.NewIntPath(q, "FLAG")
	q.rowFormat = path.NewStringPath(q, "ROW_FORMAT")
	q.pageSize = path.NewIntPath(q, "PAGE_SIZE")
	q.zipPageSize = path.NewIntPath(q, "ZIP_PAGE_SIZE")
	q.spaceType = path.NewStringPath(q, "SPACE_TYPE")
	q.fsBlockSize = path.NewIntPath(q, "FS_BLOCK_SIZE")
	q.fileSize = path.NewInt64Path(q, "FILE_SIZE")
	q.allocatedSize = path.NewInt64Path(q, "ALLOCATED_SIZE")
	q.serverVersion = path.NewStringPath(q, "SERVER_VERSION")
	q.spaceVersion = path.NewIntPath(q, "SPACE_VERSION")
	q.encryption = path.NewStringPath(q, "ENCRYPTION")
	q.state = path.NewStringPath(q, "STATE")
	return q
}

type QInnodbTablespaces struct {
	_alias        string
	space         path.IntPath
	name          path.StringPath
	flag          path.IntPath
	rowFormat     path.StringPath
	pageSize      path.IntPath
	zipPageSize   path.IntPath
	spaceType     path.StringPath
	fsBlockSize   path.IntPath
	fileSize      path.Int64Path
	allocatedSize path.Int64Path
	serverVersion path.StringPath
	spaceVersion  path.IntPath
	encryption    path.StringPath
	state         path.StringPath
}

// core.Table Functions

func (q QInnodbTablespaces) GetColumns() []core.Column {
	return []core.Column{
		q.space,
		q.name,
		q.flag,
		q.rowFormat,
		q.pageSize,
		q.zipPageSize,
		q.spaceType,
		q.fsBlockSize,
		q.fileSize,
		q.allocatedSize,
		q.serverVersion,
		q.spaceVersion,
		q.encryption,
		q.state,
	}
}

func (q QInnodbTablespaces) GetSQL(d core.Dialect, sql core.SQL) error {
	return path.ExpandTableWithDialect(d, q, sql)
}

func (q QInnodbTablespaces) GetAlias() string {
	return q._alias
}

func (q QInnodbTablespaces) GetName() string {
	return "INNODB_TABLESPACES"
}

func (q QInnodbTablespaces) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QInnodbTablespaces) Space() path.IntPath {
	return q.space
}

func (q QInnodbTablespaces) Name() path.StringPath {
	return q.name
}

func (q QInnodbTablespaces) Flag() path.IntPath {
	return q.flag
}

func (q QInnodbTablespaces) RowFormat() path.StringPath {
	return q.rowFormat
}

func (q QInnodbTablespaces) PageSize() path.IntPath {
	return q.pageSize
}

func (q QInnodbTablespaces) ZipPageSize() path.IntPath {
	return q.zipPageSize
}

func (q QInnodbTablespaces) SpaceType() path.StringPath {
	return q.spaceType
}

func (q QInnodbTablespaces) FsBlockSize() path.IntPath {
	return q.fsBlockSize
}

func (q QInnodbTablespaces) FileSize() path.Int64Path {
	return q.fileSize
}

func (q QInnodbTablespaces) AllocatedSize() path.Int64Path {
	return q.allocatedSize
}

func (q QInnodbTablespaces) ServerVersion() path.StringPath {
	return q.serverVersion
}

func (q QInnodbTablespaces) SpaceVersion() path.IntPath {
	return q.spaceVersion
}

func (q QInnodbTablespaces) Encryption() path.StringPath {
	return q.encryption
}

func (q QInnodbTablespaces) State() path.StringPath {
	return q.state
}
