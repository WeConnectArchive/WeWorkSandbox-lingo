// Code generated by Lingo for table information_schema.TRIGGERS - DO NOT EDIT

package qtriggers

import (
	"github.com/weworksandbox/lingo/core"
	"github.com/weworksandbox/lingo/core/path"
)

func As(alias string) QTriggers {
	return newQTriggers(alias)
}

func New() QTriggers {
	return newQTriggers("")
}

func newQTriggers(alias string) QTriggers {
	q := QTriggers{_alias: alias}
	q.triggerCatalog = path.NewStringPath(q, "TRIGGER_CATALOG")
	q.triggerSchema = path.NewStringPath(q, "TRIGGER_SCHEMA")
	q.triggerName = path.NewStringPath(q, "TRIGGER_NAME")
	q.eventManipulation = path.NewStringPath(q, "EVENT_MANIPULATION")
	q.eventObjectCatalog = path.NewStringPath(q, "EVENT_OBJECT_CATALOG")
	q.eventObjectSchema = path.NewStringPath(q, "EVENT_OBJECT_SCHEMA")
	q.eventObjectTable = path.NewStringPath(q, "EVENT_OBJECT_TABLE")
	q.actionOrder = path.NewInt64Path(q, "ACTION_ORDER")
	q.actionCondition = path.NewStringPath(q, "ACTION_CONDITION")
	q.actionStatement = path.NewStringPath(q, "ACTION_STATEMENT")
	q.actionOrientation = path.NewStringPath(q, "ACTION_ORIENTATION")
	q.actionTiming = path.NewStringPath(q, "ACTION_TIMING")
	q.actionReferenceOldTable = path.NewStringPath(q, "ACTION_REFERENCE_OLD_TABLE")
	q.actionReferenceNewTable = path.NewStringPath(q, "ACTION_REFERENCE_NEW_TABLE")
	q.actionReferenceOldRow = path.NewStringPath(q, "ACTION_REFERENCE_OLD_ROW")
	q.actionReferenceNewRow = path.NewStringPath(q, "ACTION_REFERENCE_NEW_ROW")
	q.created = path.NewTimePath(q, "CREATED")
	q.sqlMode = path.NewStringPath(q, "SQL_MODE")
	q.definer = path.NewStringPath(q, "DEFINER")
	q.characterSetClient = path.NewStringPath(q, "CHARACTER_SET_CLIENT")
	q.collationConnection = path.NewStringPath(q, "COLLATION_CONNECTION")
	q.databaseCollation = path.NewStringPath(q, "DATABASE_COLLATION")
	return q
}

type QTriggers struct {
	_alias                  string
	triggerCatalog          path.StringPath
	triggerSchema           path.StringPath
	triggerName             path.StringPath
	eventManipulation       path.StringPath
	eventObjectCatalog      path.StringPath
	eventObjectSchema       path.StringPath
	eventObjectTable        path.StringPath
	actionOrder             path.Int64Path
	actionCondition         path.StringPath
	actionStatement         path.StringPath
	actionOrientation       path.StringPath
	actionTiming            path.StringPath
	actionReferenceOldTable path.StringPath
	actionReferenceNewTable path.StringPath
	actionReferenceOldRow   path.StringPath
	actionReferenceNewRow   path.StringPath
	created                 path.TimePath
	sqlMode                 path.StringPath
	definer                 path.StringPath
	characterSetClient      path.StringPath
	collationConnection     path.StringPath
	databaseCollation       path.StringPath
}

// core.Table Functions

func (q QTriggers) GetColumns() []core.Column {
	return []core.Column{
		q.triggerCatalog,
		q.triggerSchema,
		q.triggerName,
		q.eventManipulation,
		q.eventObjectCatalog,
		q.eventObjectSchema,
		q.eventObjectTable,
		q.actionOrder,
		q.actionCondition,
		q.actionStatement,
		q.actionOrientation,
		q.actionTiming,
		q.actionReferenceOldTable,
		q.actionReferenceNewTable,
		q.actionReferenceOldRow,
		q.actionReferenceNewRow,
		q.created,
		q.sqlMode,
		q.definer,
		q.characterSetClient,
		q.collationConnection,
		q.databaseCollation,
	}
}

func (q QTriggers) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QTriggers) GetAlias() string {
	return q._alias
}

func (q QTriggers) GetName() string {
	return "TRIGGERS"
}

func (q QTriggers) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QTriggers) TriggerCatalog() path.StringPath {
	return q.triggerCatalog
}

func (q QTriggers) TriggerSchema() path.StringPath {
	return q.triggerSchema
}

func (q QTriggers) TriggerName() path.StringPath {
	return q.triggerName
}

func (q QTriggers) EventManipulation() path.StringPath {
	return q.eventManipulation
}

func (q QTriggers) EventObjectCatalog() path.StringPath {
	return q.eventObjectCatalog
}

func (q QTriggers) EventObjectSchema() path.StringPath {
	return q.eventObjectSchema
}

func (q QTriggers) EventObjectTable() path.StringPath {
	return q.eventObjectTable
}

func (q QTriggers) ActionOrder() path.Int64Path {
	return q.actionOrder
}

func (q QTriggers) ActionCondition() path.StringPath {
	return q.actionCondition
}

func (q QTriggers) ActionStatement() path.StringPath {
	return q.actionStatement
}

func (q QTriggers) ActionOrientation() path.StringPath {
	return q.actionOrientation
}

func (q QTriggers) ActionTiming() path.StringPath {
	return q.actionTiming
}

func (q QTriggers) ActionReferenceOldTable() path.StringPath {
	return q.actionReferenceOldTable
}

func (q QTriggers) ActionReferenceNewTable() path.StringPath {
	return q.actionReferenceNewTable
}

func (q QTriggers) ActionReferenceOldRow() path.StringPath {
	return q.actionReferenceOldRow
}

func (q QTriggers) ActionReferenceNewRow() path.StringPath {
	return q.actionReferenceNewRow
}

func (q QTriggers) Created() path.TimePath {
	return q.created
}

func (q QTriggers) SqlMode() path.StringPath {
	return q.sqlMode
}

func (q QTriggers) Definer() path.StringPath {
	return q.definer
}

func (q QTriggers) CharacterSetClient() path.StringPath {
	return q.characterSetClient
}

func (q QTriggers) CollationConnection() path.StringPath {
	return q.collationConnection
}

func (q QTriggers) DatabaseCollation() path.StringPath {
	return q.databaseCollation
}
