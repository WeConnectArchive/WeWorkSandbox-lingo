// Code generated by Lingo for table information_schema.TRIGGERS - DO NOT EDIT

package qtriggers

import (
	"github.com/weworksandbox/lingo/pkg/core"
	"github.com/weworksandbox/lingo/pkg/core/path"
)

func As(alias string) QTriggers {
	return newQTriggers(alias)
}

func New() QTriggers {
	return newQTriggers("")
}

func newQTriggers(alias string) QTriggers {
	q := QTriggers{_alias: alias}
	q.triggerCatalog = path.NewStringPath(q, "TRIGGER_CATALOG")
	q.triggerSchema = path.NewStringPath(q, "TRIGGER_SCHEMA")
	q.triggerName = path.NewStringPath(q, "TRIGGER_NAME")
	q.eventManipulation = path.NewStringPath(q, "EVENT_MANIPULATION")
	q.eventObjectCatalog = path.NewStringPath(q, "EVENT_OBJECT_CATALOG")
	q.eventObjectSchema = path.NewStringPath(q, "EVENT_OBJECT_SCHEMA")
	q.eventObjectTable = path.NewStringPath(q, "EVENT_OBJECT_TABLE")
	q.actionOrder = path.NewInt64Path(q, "ACTION_ORDER")
	q.actionCondition = path.NewStringPath(q, "ACTION_CONDITION")
	q.actionStatement = path.NewStringPath(q, "ACTION_STATEMENT")
	q.actionOrientation = path.NewStringPath(q, "ACTION_ORIENTATION")
	q.actionTiming = path.NewStringPath(q, "ACTION_TIMING")
	q.actionReferenceOldTable = path.NewStringPath(q, "ACTION_REFERENCE_OLD_TABLE")
	q.actionReferenceNewTable = path.NewStringPath(q, "ACTION_REFERENCE_NEW_TABLE")
	q.actionReferenceOldRow = path.NewStringPath(q, "ACTION_REFERENCE_OLD_ROW")
	q.actionReferenceNewRow = path.NewStringPath(q, "ACTION_REFERENCE_NEW_ROW")
	q.created = path.NewTimePath(q, "CREATED")
	q.sqlMode = path.NewStringPath(q, "SQL_MODE")
	q.definer = path.NewStringPath(q, "DEFINER")
	q.characterSetClient = path.NewStringPath(q, "CHARACTER_SET_CLIENT")
	q.collationConnection = path.NewStringPath(q, "COLLATION_CONNECTION")
	q.databaseCollation = path.NewStringPath(q, "DATABASE_COLLATION")
	return q
}

type QTriggers struct {
	_alias                  string
	triggerCatalog          path.String
	triggerSchema           path.String
	triggerName             path.String
	eventManipulation       path.String
	eventObjectCatalog      path.String
	eventObjectSchema       path.String
	eventObjectTable        path.String
	actionOrder             path.Int64
	actionCondition         path.String
	actionStatement         path.String
	actionOrientation       path.String
	actionTiming            path.String
	actionReferenceOldTable path.String
	actionReferenceNewTable path.String
	actionReferenceOldRow   path.String
	actionReferenceNewRow   path.String
	created                 path.Time
	sqlMode                 path.String
	definer                 path.String
	characterSetClient      path.String
	collationConnection     path.String
	databaseCollation       path.String
}

// core.Table Functions

func (q QTriggers) GetColumns() []core.Column {
	return []core.Column{
		q.triggerCatalog,
		q.triggerSchema,
		q.triggerName,
		q.eventManipulation,
		q.eventObjectCatalog,
		q.eventObjectSchema,
		q.eventObjectTable,
		q.actionOrder,
		q.actionCondition,
		q.actionStatement,
		q.actionOrientation,
		q.actionTiming,
		q.actionReferenceOldTable,
		q.actionReferenceNewTable,
		q.actionReferenceOldRow,
		q.actionReferenceNewRow,
		q.created,
		q.sqlMode,
		q.definer,
		q.characterSetClient,
		q.collationConnection,
		q.databaseCollation,
	}
}

func (q QTriggers) GetSQL(d core.Dialect) (core.SQL, error) {
	return path.ExpandTableWithDialect(d, q)
}

func (q QTriggers) GetAlias() string {
	return q._alias
}

func (q QTriggers) GetName() string {
	return "TRIGGERS"
}

func (q QTriggers) GetParent() string {
	return "information_schema"
}

// Column Functions

func (q QTriggers) TriggerCatalog() path.String {
	return q.triggerCatalog
}

func (q QTriggers) TriggerSchema() path.String {
	return q.triggerSchema
}

func (q QTriggers) TriggerName() path.String {
	return q.triggerName
}

func (q QTriggers) EventManipulation() path.String {
	return q.eventManipulation
}

func (q QTriggers) EventObjectCatalog() path.String {
	return q.eventObjectCatalog
}

func (q QTriggers) EventObjectSchema() path.String {
	return q.eventObjectSchema
}

func (q QTriggers) EventObjectTable() path.String {
	return q.eventObjectTable
}

func (q QTriggers) ActionOrder() path.Int64 {
	return q.actionOrder
}

func (q QTriggers) ActionCondition() path.String {
	return q.actionCondition
}

func (q QTriggers) ActionStatement() path.String {
	return q.actionStatement
}

func (q QTriggers) ActionOrientation() path.String {
	return q.actionOrientation
}

func (q QTriggers) ActionTiming() path.String {
	return q.actionTiming
}

func (q QTriggers) ActionReferenceOldTable() path.String {
	return q.actionReferenceOldTable
}

func (q QTriggers) ActionReferenceNewTable() path.String {
	return q.actionReferenceNewTable
}

func (q QTriggers) ActionReferenceOldRow() path.String {
	return q.actionReferenceOldRow
}

func (q QTriggers) ActionReferenceNewRow() path.String {
	return q.actionReferenceNewRow
}

func (q QTriggers) Created() path.Time {
	return q.created
}

func (q QTriggers) SqlMode() path.String {
	return q.sqlMode
}

func (q QTriggers) Definer() path.String {
	return q.definer
}

func (q QTriggers) CharacterSetClient() path.String {
	return q.characterSetClient
}

func (q QTriggers) CollationConnection() path.String {
	return q.collationConnection
}

func (q QTriggers) DatabaseCollation() path.String {
	return q.databaseCollation
}
