package remove

import (
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"github.com/weworksandbox/lingo/internal/generator"
)

const (
	flagDir        = "dir"
	flagRecursive  = "recursive"
	shortRecursive = "R"
	flagVerbose    = "verbose"
	shortVerbose   = "v"
)

func Command() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "remove",
		Short: "Remove generated table and schema files",
		Long:  "Only files with the 'generated by lingo' headers will be removed",
		Args:  cobra.MaximumNArgs(0),
		Run:   remove,
	}

	cmd.PersistentFlags().StringP(flagDir, "d", "./db",
		"directory where to remove generated files from")
	_ = viper.BindPFlag(flagDir, cmd.Flag(flagDir))
	_ = cmd.PersistentFlags().SetAnnotation(flagDir, cobra.BashCompSubdirsInDir, []string{})

	cmd.PersistentFlags().BoolP(flagRecursive, shortRecursive, false, "recursively remove generated files")
	rFlag := cmd.Flag(flagRecursive)
	rFlag.Shorthand = shortRecursive
	_ = viper.BindPFlag(flagRecursive, rFlag)

	cmd.PersistentFlags().BoolP(flagVerbose, shortVerbose, false, "print each file path on remove")
	vFlag := cmd.Flag(flagVerbose)
	vFlag.Shorthand = shortVerbose
	_ = viper.BindPFlag(flagVerbose, vFlag)
	return cmd
}

//revive:disable:deep-exit - Disabling deep exits from log.Fatalf due to this being a 'top level' command.

func remove(*cobra.Command, []string) {
	s := getSettings()

	rootDir := s.RootDirectory()
	if rootDir == "" {
		log.Fatal("root directory must be set")
	}
	rootDir = filepath.Clean(rootDir)

	removeWalker := generator.RemoveOldFiles(generator.HeaderCommentPrefix)
	err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		// Ignore directories, we dont do anything with them.
		if info.IsDir() {
			return nil
		}

		// If we are not recursive do not check sub folders
		if !s.Recursive() && !strings.EqualFold(filepath.Dir(path), rootDir) {
			// skip
			return nil
		}

		walkErr := removeWalker(path, info, err)
		if walkErr != nil {
			return walkErr
		}

		if s.Verbose() {
			log.Printf("Removed: %s", path)
		}
		return nil
	})
	if err != nil {
		log.Fatalf("unable to remove old generated files: %s", err.Error())
	}
	log.Printf("completed")
}
