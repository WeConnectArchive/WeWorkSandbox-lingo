package paths

import (
	"io"
	"text/template"

	"github.com/weworksandbox/lingo/expr"
	"github.com/weworksandbox/lingo/internal/generate"
)

const (
	GenPathFileHeader = "// Code generated by an internal Lingo tool, genpaths.go - DO NOT EDIT"
)

type Path struct {
	Name      string
	Filename  string
	GoType    string
	Imports   []string
	Operators []expr.Operator
}

func (p Path) Generate() (io.Reader, error) {
	return generate.FromTemplate(pathTemplate, p)
}

var pathTemplate = template.Must(template.New("pathTemplate").Parse(pathTemplateString))
const pathTemplateString = GenPathFileHeader + `

package path

{{ template "imports" }}

func New{{ .Name }}WithAlias(e lingo.Table, name, alias string) {{ .Name }} {
	return {{ .Name }}{
		entity: e,
		name:   name,
		alias:  alias,
	}
}

func New{{ .Name }}(e lingo.Table, name string) {{ .Name }} {
	return New{{ .Name }}WithAlias(e, name, "")
}

type {{ .Name }} struct {
	entity lingo.Table
	name   string
	alias  string
}

func (p {{ .Name }}) GetParent() lingo.Table {
	return p.entity
}

func (p {{ .Name }}) GetName() string {
	return p.name
}

func (p {{ .Name }}) GetAlias() string {
	return p.alias
}

func (p {{ .Name }}) As(alias string) {{ .Name }} {
	p.alias = alias
	return p
}

func (p {{ .Name }}) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return ExpandColumnWithDialect(d, p)
}

{{-range _, $operator := .Operators}}

func (p {{ .Name }}) {{call $operator.Name}}(value {{ .GoType }}) expr.Operation {
	return expr.{{call $operator.Name}}(p, expr.NewValue(value))
}

func (p {{ .Name }}) {{call $operator.Name}}Path(exp lingo.Expression) expr.Operation {
	return expr.{{call $operator.Name}}(p, exp)
}
{{end}}
`
