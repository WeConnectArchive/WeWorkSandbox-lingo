// Code generated by Lingo for table sakila.actor_info - DO NOT EDIT

// +build !nolingo

package tactorinfo

import (
	"github.com/weworksandbox/lingo"
	"github.com/weworksandbox/lingo/expr"
	"github.com/weworksandbox/lingo/sql"
)

func As(alias string) TActorInfo {
	t := New()
	if alias != "" {
		t.alias = expr.Lit(alias)
	}
	return t
}

func New() TActorInfo {
	return TActorInfo{}
}

type TActorInfo struct {
	alias lingo.Expression
}

// lingo.Table Functions

func (t TActorInfo) GetTableName() string {
	return "actor_info"
}

func (t TActorInfo) GetColumns() []lingo.Expression {
	return []lingo.Expression{
		t.ActorId(),
		t.FirstName(),
		t.LastName(),
		t.FilmInfo(),
	}
}

func (t TActorInfo) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return expr.Table(t).ToSQL(d)
}

func (t TActorInfo) GetName() lingo.Expression {
	return expr.TableName(t)
}

func (t TActorInfo) GetAlias() lingo.Expression {
	return t.alias
}

// Column Functions

func (t TActorInfo) ActorId() expr.Int16 {
	return expr.Column(t, expr.Lit("actor_id")).ToSQL
}

func (t TActorInfo) FirstName() expr.String {
	return expr.Column(t, expr.Lit("first_name")).ToSQL
}

func (t TActorInfo) LastName() expr.String {
	return expr.Column(t, expr.Lit("last_name")).ToSQL
}

func (t TActorInfo) FilmInfo() expr.String {
	return expr.Column(t, expr.Lit("film_info")).ToSQL
}
