// Code generated by Lingo for table sakila.staff - DO NOT EDIT

// +build !nolingo

package tstaff

import (
	"github.com/weworksandbox/lingo"
	"github.com/weworksandbox/lingo/expr"
	"github.com/weworksandbox/lingo/sql"
)

func As(alias string) TStaff {
	t := New()
	if alias != "" {
		t.alias = expr.Lit(alias)
	}
	return t
}

func New() TStaff {
	return TStaff{}
}

type TStaff struct {
	alias lingo.Expression
}

// lingo.Table Functions

func (t TStaff) GetTableName() string {
	return "staff"
}

func (t TStaff) GetColumns() []lingo.Expression {
	return []lingo.Expression{
		t.StaffId(),
		t.FirstName(),
		t.LastName(),
		t.AddressId(),
		t.Picture(),
		t.Email(),
		t.StoreId(),
		t.Active(),
		t.Username(),
		t.Password(),
		t.LastUpdate(),
	}
}

func (t TStaff) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return expr.Table(t).ToSQL(d)
}

func (t TStaff) GetName() lingo.Expression {
	return expr.TableName(t)
}

func (t TStaff) GetAlias() lingo.Expression {
	return t.alias
}

// Column Functions

func (t TStaff) StaffId() expr.Int8 {
	return expr.Column(t, expr.Lit("staff_id")).ToSQL
}

func (t TStaff) FirstName() expr.String {
	return expr.Column(t, expr.Lit("first_name")).ToSQL
}

func (t TStaff) LastName() expr.String {
	return expr.Column(t, expr.Lit("last_name")).ToSQL
}

func (t TStaff) AddressId() expr.Int16 {
	return expr.Column(t, expr.Lit("address_id")).ToSQL
}

func (t TStaff) Picture() expr.UnsupportedType {
	return expr.Column(t, expr.Lit("picture")).ToSQL
}

func (t TStaff) Email() expr.String {
	return expr.Column(t, expr.Lit("email")).ToSQL
}

func (t TStaff) StoreId() expr.Int8 {
	return expr.Column(t, expr.Lit("store_id")).ToSQL
}

func (t TStaff) Active() expr.Int8 {
	return expr.Column(t, expr.Lit("active")).ToSQL
}

func (t TStaff) Username() expr.String {
	return expr.Column(t, expr.Lit("username")).ToSQL
}

func (t TStaff) Password() expr.String {
	return expr.Column(t, expr.Lit("password")).ToSQL
}

func (t TStaff) LastUpdate() expr.Time {
	return expr.Column(t, expr.Lit("last_update")).ToSQL
}
