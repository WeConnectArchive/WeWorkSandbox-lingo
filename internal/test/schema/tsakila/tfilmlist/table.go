// Code generated by Lingo for table sakila.film_list - DO NOT EDIT

// +build !nolingo

package tfilmlist

import (
	"github.com/weworksandbox/lingo"
	"github.com/weworksandbox/lingo/expr"
	"github.com/weworksandbox/lingo/sql"
)

func As(alias string) TFilmList {
	t := New()
	if alias != "" {
		t.alias = expr.Lit(alias)
	}
	return t
}

func New() TFilmList {
	return TFilmList{}
}

type TFilmList struct {
	alias lingo.Expression
}

// lingo.Table Functions

func (t TFilmList) GetTableName() string {
	return "film_list"
}

func (t TFilmList) GetColumns() []lingo.Expression {
	return []lingo.Expression{
		t.FID(),
		t.Title(),
		t.Description(),
		t.Category(),
		t.Price(),
		t.Length(),
		t.Rating(),
		t.Actors(),
	}
}

func (t TFilmList) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return expr.Table(t).ToSQL(d)
}

func (t TFilmList) GetName() lingo.Expression {
	return expr.TableName(t)
}

func (t TFilmList) GetAlias() lingo.Expression {
	return t.alias
}

// Column Functions

func (t TFilmList) FID() expr.Int16 {
	return expr.Column(t, expr.Lit("FID")).ToSQL
}

func (t TFilmList) Title() expr.String {
	return expr.Column(t, expr.Lit("title")).ToSQL
}

func (t TFilmList) Description() expr.String {
	return expr.Column(t, expr.Lit("description")).ToSQL
}

func (t TFilmList) Category() expr.String {
	return expr.Column(t, expr.Lit("category")).ToSQL
}

func (t TFilmList) Price() expr.Binary {
	return expr.Column(t, expr.Lit("price")).ToSQL
}

func (t TFilmList) Length() expr.Int16 {
	return expr.Column(t, expr.Lit("length")).ToSQL
}

func (t TFilmList) Rating() expr.String {
	return expr.Column(t, expr.Lit("rating")).ToSQL
}

func (t TFilmList) Actors() expr.String {
	return expr.Column(t, expr.Lit("actors")).ToSQL
}
