// Code generated by Lingo for table sakila.nicer_but_slower_film_list - DO NOT EDIT

// +build !nolingo

package tnicerbutslowerfilmlist

import (
	"github.com/weworksandbox/lingo"
	"github.com/weworksandbox/lingo/expr"
	"github.com/weworksandbox/lingo/sql"
)

func As(alias string) TNicerButSlowerFilmList {
	t := New()
	if alias != "" {
		t.alias = expr.Lit(alias)
	}
	return t
}

func New() TNicerButSlowerFilmList {
	return TNicerButSlowerFilmList{}
}

type TNicerButSlowerFilmList struct {
	alias lingo.Expression
}

// lingo.Table Functions

func (t TNicerButSlowerFilmList) GetTableName() string {
	return "nicer_but_slower_film_list"
}

func (t TNicerButSlowerFilmList) GetColumns() []lingo.Expression {
	return []lingo.Expression{
		t.FID(),
		t.Title(),
		t.Description(),
		t.Category(),
		t.Price(),
		t.Length(),
		t.Rating(),
		t.Actors(),
	}
}

func (t TNicerButSlowerFilmList) ToSQL(d lingo.Dialect) (sql.Data, error) {
	return expr.Table(t).ToSQL(d)
}

func (t TNicerButSlowerFilmList) GetName() lingo.Expression {
	return expr.TableName(t)
}

func (t TNicerButSlowerFilmList) GetAlias() lingo.Expression {
	return t.alias
}

// Column Functions

func (t TNicerButSlowerFilmList) FID() expr.Int16 {
	return expr.Column(t, expr.Lit("FID")).ToSQL
}

func (t TNicerButSlowerFilmList) Title() expr.String {
	return expr.Column(t, expr.Lit("title")).ToSQL
}

func (t TNicerButSlowerFilmList) Description() expr.String {
	return expr.Column(t, expr.Lit("description")).ToSQL
}

func (t TNicerButSlowerFilmList) Category() expr.String {
	return expr.Column(t, expr.Lit("category")).ToSQL
}

func (t TNicerButSlowerFilmList) Price() expr.Binary {
	return expr.Column(t, expr.Lit("price")).ToSQL
}

func (t TNicerButSlowerFilmList) Length() expr.Int16 {
	return expr.Column(t, expr.Lit("length")).ToSQL
}

func (t TNicerButSlowerFilmList) Rating() expr.String {
	return expr.Column(t, expr.Lit("rating")).ToSQL
}

func (t TNicerButSlowerFilmList) Actors() expr.String {
	return expr.Column(t, expr.Lit("actors")).ToSQL
}
